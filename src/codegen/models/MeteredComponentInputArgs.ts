/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MeteredComponentLabelLimitInputArgs,
    MeteredComponentLabelLimitInputArgsFromJSON,
    MeteredComponentLabelLimitInputArgsFromJSONTyped,
    MeteredComponentLabelLimitInputArgsToJSON,
} from './MeteredComponentLabelLimitInputArgs';
import {
    PriceSchemeInputArgs,
    PriceSchemeInputArgsFromJSON,
    PriceSchemeInputArgsFromJSONTyped,
    PriceSchemeInputArgsToJSON,
} from './PriceSchemeInputArgs';

/**
 * 
 * @export
 * @interface MeteredComponentInputArgs
 */
export interface MeteredComponentInputArgs {
    /**
     * 
     * @type {Array<MeteredComponentLabelLimitInputArgs>}
     * @memberof MeteredComponentInputArgs
     */
    labelLimits?: Array<MeteredComponentLabelLimitInputArgs>;
    /**
     * Minimum charge frequency (as a multiple of the price plan period) for the metered component
     * @type {number}
     * @memberof MeteredComponentInputArgs
     */
    minimumChargeFrequency?: number | null;
    /**
     * Codename of the meter.
     * @type {string}
     * @memberof MeteredComponentInputArgs
     */
    meterName?: string;
    /**
     * 
     * @type {PriceSchemeInputArgs}
     * @memberof MeteredComponentInputArgs
     */
    priceScheme?: PriceSchemeInputArgs;
    /**
     * Minimum charge for the metered component
     * @type {number}
     * @memberof MeteredComponentInputArgs
     */
    minimumCharge?: number | null;
    /**
     * Numeric limit to set on customer usage for the meter.
     * @type {number}
     * @memberof MeteredComponentInputArgs
     */
    limit?: number;
    /**
     * Name to be used on invoice.
     * @type {string}
     * @memberof MeteredComponentInputArgs
     */
    displayName?: string;
    /**
     * 
     * @type {number}
     * @memberof MeteredComponentInputArgs
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof MeteredComponentInputArgs
     */
    meterId?: number;
}

export function MeteredComponentInputArgsFromJSON(json: any): MeteredComponentInputArgs {
    return MeteredComponentInputArgsFromJSONTyped(json, false);
}

export function MeteredComponentInputArgsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeteredComponentInputArgs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'labelLimits': !exists(json, 'label_limits') ? undefined : ((json['label_limits'] as Array<any>).map(MeteredComponentLabelLimitInputArgsFromJSON)),
        'minimumChargeFrequency': !exists(json, 'minimum_charge_frequency') ? undefined : json['minimum_charge_frequency'],
        'meterName': !exists(json, 'meter_name') ? undefined : json['meter_name'],
        'priceScheme': !exists(json, 'price_scheme') ? undefined : PriceSchemeInputArgsFromJSON(json['price_scheme']),
        'minimumCharge': !exists(json, 'minimum_charge') ? undefined : json['minimum_charge'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'meterId': !exists(json, 'meter_id') ? undefined : json['meter_id'],
    };
}

export function MeteredComponentInputArgsToJSON(value?: MeteredComponentInputArgs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'label_limits': value.labelLimits === undefined ? undefined : ((value.labelLimits as Array<any>).map(MeteredComponentLabelLimitInputArgsToJSON)),
        'minimum_charge_frequency': value.minimumChargeFrequency,
        'meter_name': value.meterName,
        'price_scheme': PriceSchemeInputArgsToJSON(value.priceScheme),
        'minimum_charge': value.minimumCharge,
        'limit': value.limit,
        'display_name': value.displayName,
        'id': value.id,
        'meter_id': value.meterId,
    };
}

