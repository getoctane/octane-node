/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Meter
 */
export interface Meter {
    /**
     * Unique name identifier
     * @type {string}
     * @memberof Meter
     */
    readonly name: string;
    /**
     * Name used for display in UI
     * @type {string}
     * @memberof Meter
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    description?: string | null;
    /**
     * Whether measurement values are to be considered incremental (versus a running total)
     * @type {boolean}
     * @memberof Meter
     */
    isIncremental: boolean;
    /**
     * 
     * @type {any}
     * @memberof Meter
     */
    readonly meterType?: any | null;
    /**
     * The expected unit for the measurement values associated with this meter.
     * @type {any}
     * @memberof Meter
     */
    unitName?: any | null;
    /**
     * 
     * @type {Array<any>}
     * @memberof Meter
     */
    expectedLabels?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof Meter
     */
    primaryLabels?: Array<any>;
}

export function MeterFromJSON(json: any): Meter {
    return MeterFromJSONTyped(json, false);
}

export function MeterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Meter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'isIncremental': json['is_incremental'],
        'meterType': !exists(json, 'meter_type') ? undefined : json['meter_type'],
        'unitName': !exists(json, 'unit_name') ? undefined : json['unit_name'],
        'expectedLabels': !exists(json, 'expected_labels') ? undefined : json['expected_labels'],
        'primaryLabels': !exists(json, 'primary_labels') ? undefined : json['primary_labels'],
    };
}

export function MeterToJSON(value?: Meter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'display_name': value.displayName,
        'description': value.description,
        'is_incremental': value.isIncremental,
        'unit_name': value.unitName,
        'expected_labels': value.expectedLabels,
        'primary_labels': value.primaryLabels,
    };
}

