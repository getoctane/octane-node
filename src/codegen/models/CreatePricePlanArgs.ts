/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddOnInputArgs,
    AddOnInputArgsFromJSON,
    AddOnInputArgsFromJSONTyped,
    AddOnInputArgsToJSON,
} from './AddOnInputArgs';
import {
    FeatureInputArgs,
    FeatureInputArgsFromJSON,
    FeatureInputArgsFromJSONTyped,
    FeatureInputArgsToJSON,
} from './FeatureInputArgs';
import {
    LimitInputArgs,
    LimitInputArgsFromJSON,
    LimitInputArgsFromJSONTyped,
    LimitInputArgsToJSON,
} from './LimitInputArgs';
import {
    MeteredComponentInputArgs,
    MeteredComponentInputArgsFromJSON,
    MeteredComponentInputArgsFromJSONTyped,
    MeteredComponentInputArgsToJSON,
} from './MeteredComponentInputArgs';
import {
    TrialInputArgs,
    TrialInputArgsFromJSON,
    TrialInputArgsFromJSONTyped,
    TrialInputArgsToJSON,
} from './TrialInputArgs';

/**
 * 
 * @export
 * @interface CreatePricePlanArgs
 */
export interface CreatePricePlanArgs {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreatePricePlanArgs
     */
    tags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CreatePricePlanArgs
     */
    basePrice?: number;
    /**
     * The frequency (as a an integer multiple of the period) at which to charge the minimum charge.
     * @type {number}
     * @memberof CreatePricePlanArgs
     */
    minimumChargeFrequency?: number | null;
    /**
     * Custom invoice description for the base price line item.
     * @type {string}
     * @memberof CreatePricePlanArgs
     */
    basePriceDescription?: string | null;
    /**
     * Minimum amount (in cents) to charge every price plan period.
     * @type {number}
     * @memberof CreatePricePlanArgs
     */
    minimumCharge?: number | null;
    /**
     * 
     * @type {Array<LimitInputArgs>}
     * @memberof CreatePricePlanArgs
     */
    limits?: Array<LimitInputArgs>;
    /**
     * 
     * @type {Array<AddOnInputArgs>}
     * @memberof CreatePricePlanArgs
     */
    addOns?: Array<AddOnInputArgs>;
    /**
     * 
     * @type {TrialInputArgs}
     * @memberof CreatePricePlanArgs
     */
    trial?: TrialInputArgs;
    /**
     * 
     * @type {Array<FeatureInputArgs>}
     * @memberof CreatePricePlanArgs
     */
    features?: Array<FeatureInputArgs>;
    /**
     * 
     * @type {string}
     * @memberof CreatePricePlanArgs
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePricePlanArgs
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePricePlanArgs
     */
    period?: string;
    /**
     * 
     * @type {Array<MeteredComponentInputArgs>}
     * @memberof CreatePricePlanArgs
     */
    meteredComponents?: Array<MeteredComponentInputArgs>;
    /**
     * 
     * @type {number}
     * @memberof CreatePricePlanArgs
     */
    vendorId?: number;
    /**
     * The frequency (as a an integer multiple of the period) at which to charge the base price.
     * @type {number}
     * @memberof CreatePricePlanArgs
     */
    basePriceFrequency?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatePricePlanArgs
     */
    displayName?: string;
}

export function CreatePricePlanArgsFromJSON(json: any): CreatePricePlanArgs {
    return CreatePricePlanArgsFromJSONTyped(json, false);
}

export function CreatePricePlanArgsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreatePricePlanArgs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'basePrice': !exists(json, 'base_price') ? undefined : json['base_price'],
        'minimumChargeFrequency': !exists(json, 'minimum_charge_frequency') ? undefined : json['minimum_charge_frequency'],
        'basePriceDescription': !exists(json, 'base_price_description') ? undefined : json['base_price_description'],
        'minimumCharge': !exists(json, 'minimum_charge') ? undefined : json['minimum_charge'],
        'limits': !exists(json, 'limits') ? undefined : ((json['limits'] as Array<any>).map(LimitInputArgsFromJSON)),
        'addOns': !exists(json, 'add_ons') ? undefined : ((json['add_ons'] as Array<any>).map(AddOnInputArgsFromJSON)),
        'trial': !exists(json, 'trial') ? undefined : TrialInputArgsFromJSON(json['trial']),
        'features': !exists(json, 'features') ? undefined : ((json['features'] as Array<any>).map(FeatureInputArgsFromJSON)),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'period': !exists(json, 'period') ? undefined : json['period'],
        'meteredComponents': !exists(json, 'metered_components') ? undefined : ((json['metered_components'] as Array<any>).map(MeteredComponentInputArgsFromJSON)),
        'vendorId': !exists(json, 'vendor_id') ? undefined : json['vendor_id'],
        'basePriceFrequency': !exists(json, 'base_price_frequency') ? undefined : json['base_price_frequency'],
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
    };
}

export function CreatePricePlanArgsToJSON(value?: CreatePricePlanArgs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tags': value.tags,
        'base_price': value.basePrice,
        'minimum_charge_frequency': value.minimumChargeFrequency,
        'base_price_description': value.basePriceDescription,
        'minimum_charge': value.minimumCharge,
        'limits': value.limits === undefined ? undefined : ((value.limits as Array<any>).map(LimitInputArgsToJSON)),
        'add_ons': value.addOns === undefined ? undefined : ((value.addOns as Array<any>).map(AddOnInputArgsToJSON)),
        'trial': TrialInputArgsToJSON(value.trial),
        'features': value.features === undefined ? undefined : ((value.features as Array<any>).map(FeatureInputArgsToJSON)),
        'description': value.description,
        'name': value.name,
        'period': value.period,
        'metered_components': value.meteredComponents === undefined ? undefined : ((value.meteredComponents as Array<any>).map(MeteredComponentInputArgsToJSON)),
        'vendor_id': value.vendorId,
        'base_price_frequency': value.basePriceFrequency,
        'display_name': value.displayName,
    };
}

