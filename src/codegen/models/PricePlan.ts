/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddOn,
    AddOnFromJSON,
    AddOnFromJSONTyped,
    AddOnToJSON,
} from './AddOn';
import {
    Feature,
    FeatureFromJSON,
    FeatureFromJSONTyped,
    FeatureToJSON,
} from './Feature';
import {
    Limit,
    LimitFromJSON,
    LimitFromJSONTyped,
    LimitToJSON,
} from './Limit';
import {
    MeteredComponent,
    MeteredComponentFromJSON,
    MeteredComponentFromJSONTyped,
    MeteredComponentToJSON,
} from './MeteredComponent';
import {
    PricePlanTag,
    PricePlanTagFromJSON,
    PricePlanTagFromJSONTyped,
    PricePlanTagToJSON,
} from './PricePlanTag';
import {
    Trial,
    TrialFromJSON,
    TrialFromJSONTyped,
    TrialToJSON,
} from './Trial';

/**
 * 
 * @export
 * @interface PricePlan
 */
export interface PricePlan {
    /**
     * External facing unique identifier of a price plan
     * @type {string}
     * @memberof PricePlan
     */
    externalUuid?: string;
    /**
     * Unique name indentifier of a price plan
     * @type {string}
     * @memberof PricePlan
     */
    name: string;
    /**
     * UI-friendly name used for data display. Defaults to `name`.
     * @type {string}
     * @memberof PricePlan
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof PricePlan
     */
    description?: string | null;
    /**
     * Lowest denomination of currency. e.g. USD is represented as cents.
     * @type {number}
     * @memberof PricePlan
     */
    basePrice?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PricePlan
     */
    basePriceFrequency?: number | null;
    /**
     * Custom invoice description for the base price line item.
     * @type {string}
     * @memberof PricePlan
     */
    basePriceDescription?: string | null;
    /**
     * Time period that defines the length of a price plan cycle. One of `month`, `quarter`, or `year`.
     * @type {string}
     * @memberof PricePlan
     */
    period: string;
    /**
     * 
     * @type {Array<MeteredComponent>}
     * @memberof PricePlan
     */
    meteredComponents: Array<MeteredComponent>;
    /**
     * Minimum amount to charge every 'period'
     * @type {number}
     * @memberof PricePlan
     */
    minimumCharge?: number | null;
    /**
     * The frequency (as a an integer multiple of the period) at which to charge the minimum charge.
     * @type {number}
     * @memberof PricePlan
     */
    minimumChargeFrequency?: number | null;
    /**
     * 
     * @type {Array<Feature>}
     * @memberof PricePlan
     */
    features?: Array<Feature>;
    /**
     * 
     * @type {Array<AddOn>}
     * @memberof PricePlan
     */
    addOns?: Array<AddOn>;
    /**
     * 
     * @type {Array<Limit>}
     * @memberof PricePlan
     */
    limits?: Array<Limit>;
    /**
     * 
     * @type {Array<PricePlanTag>}
     * @memberof PricePlan
     */
    tags?: Array<PricePlanTag>;
    /**
     * 
     * @type {Trial}
     * @memberof PricePlan
     */
    trial?: Trial;
    /**
     * ISO-8601 formatted creation timestamp of price plan version
     * @type {Date}
     * @memberof PricePlan
     */
    createdAt?: Date;
}

export function PricePlanFromJSON(json: any): PricePlan {
    return PricePlanFromJSONTyped(json, false);
}

export function PricePlanFromJSONTyped(json: any, ignoreDiscriminator: boolean): PricePlan {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'externalUuid': !exists(json, 'external_uuid') ? undefined : json['external_uuid'],
        'name': json['name'],
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'basePrice': !exists(json, 'base_price') ? undefined : json['base_price'],
        'basePriceFrequency': !exists(json, 'base_price_frequency') ? undefined : json['base_price_frequency'],
        'basePriceDescription': !exists(json, 'base_price_description') ? undefined : json['base_price_description'],
        'period': json['period'],
        'meteredComponents': ((json['metered_components'] as Array<any>).map(MeteredComponentFromJSON)),
        'minimumCharge': !exists(json, 'minimum_charge') ? undefined : json['minimum_charge'],
        'minimumChargeFrequency': !exists(json, 'minimum_charge_frequency') ? undefined : json['minimum_charge_frequency'],
        'features': !exists(json, 'features') ? undefined : ((json['features'] as Array<any>).map(FeatureFromJSON)),
        'addOns': !exists(json, 'add_ons') ? undefined : ((json['add_ons'] as Array<any>).map(AddOnFromJSON)),
        'limits': !exists(json, 'limits') ? undefined : ((json['limits'] as Array<any>).map(LimitFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(PricePlanTagFromJSON)),
        'trial': !exists(json, 'trial') ? undefined : TrialFromJSON(json['trial']),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
    };
}

export function PricePlanToJSON(value?: PricePlan | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'external_uuid': value.externalUuid,
        'name': value.name,
        'display_name': value.displayName,
        'description': value.description,
        'base_price': value.basePrice,
        'base_price_frequency': value.basePriceFrequency,
        'base_price_description': value.basePriceDescription,
        'period': value.period,
        'metered_components': ((value.meteredComponents as Array<any>).map(MeteredComponentToJSON)),
        'minimum_charge': value.minimumCharge,
        'minimum_charge_frequency': value.minimumChargeFrequency,
        'features': value.features === undefined ? undefined : ((value.features as Array<any>).map(FeatureToJSON)),
        'add_ons': value.addOns === undefined ? undefined : ((value.addOns as Array<any>).map(AddOnToJSON)),
        'limits': value.limits === undefined ? undefined : ((value.limits as Array<any>).map(LimitToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(PricePlanTagToJSON)),
        'trial': TrialToJSON(value.trial),
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

