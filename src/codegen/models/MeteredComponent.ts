/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MeteredComponentLabelLimit,
    MeteredComponentLabelLimitFromJSON,
    MeteredComponentLabelLimitFromJSONTyped,
    MeteredComponentLabelLimitToJSON,
} from './MeteredComponentLabelLimit';
import {
    PriceScheme,
    PriceSchemeFromJSON,
    PriceSchemeFromJSONTyped,
    PriceSchemeToJSON,
} from './PriceScheme';

/**
 * 
 * @export
 * @interface MeteredComponent
 */
export interface MeteredComponent {
    /**
     * 
     * @type {string}
     * @memberof MeteredComponent
     */
    meterName: string;
    /**
     * 
     * @type {string}
     * @memberof MeteredComponent
     */
    meterDisplayName: string;
    /**
     * 
     * @type {PriceScheme}
     * @memberof MeteredComponent
     */
    priceScheme: PriceScheme;
    /**
     * Limit on the usage for the meter.
     * @type {number}
     * @memberof MeteredComponent
     */
    limit?: number | null;
    /**
     * 
     * @type {Array<MeteredComponentLabelLimit>}
     * @memberof MeteredComponent
     */
    labelLimits: Array<MeteredComponentLabelLimit>;
    /**
     * Name to be used on invoice.
     * @type {string}
     * @memberof MeteredComponent
     */
    displayName?: string | null;
    /**
     * External facing unique identifier of a metered component
     * @type {string}
     * @memberof MeteredComponent
     */
    externalUuid?: string;
    /**
     * Minimum charge for the metered component
     * @type {number}
     * @memberof MeteredComponent
     */
    minimumCharge?: number | null;
    /**
     * Minimum charge frequency (as a multiple of the price plan period) for the metered component
     * @type {number}
     * @memberof MeteredComponent
     */
    minimumChargeFrequency?: number | null;
}

export function MeteredComponentFromJSON(json: any): MeteredComponent {
    return MeteredComponentFromJSONTyped(json, false);
}

export function MeteredComponentFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeteredComponent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'meterName': json['meter_name'],
        'meterDisplayName': json['meter_display_name'],
        'priceScheme': PriceSchemeFromJSON(json['price_scheme']),
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'labelLimits': ((json['label_limits'] as Array<any>).map(MeteredComponentLabelLimitFromJSON)),
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
        'externalUuid': !exists(json, 'external_uuid') ? undefined : json['external_uuid'],
        'minimumCharge': !exists(json, 'minimum_charge') ? undefined : json['minimum_charge'],
        'minimumChargeFrequency': !exists(json, 'minimum_charge_frequency') ? undefined : json['minimum_charge_frequency'],
    };
}

export function MeteredComponentToJSON(value?: MeteredComponent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'meter_name': value.meterName,
        'meter_display_name': value.meterDisplayName,
        'price_scheme': PriceSchemeToJSON(value.priceScheme),
        'limit': value.limit,
        'label_limits': ((value.labelLimits as Array<any>).map(MeteredComponentLabelLimitToJSON)),
        'display_name': value.displayName,
        'external_uuid': value.externalUuid,
        'minimum_charge': value.minimumCharge,
        'minimum_charge_frequency': value.minimumChargeFrequency,
    };
}

