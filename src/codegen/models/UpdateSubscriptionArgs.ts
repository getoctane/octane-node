/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CreditPlanInputArgs,
    CreditPlanInputArgsFromJSON,
    CreditPlanInputArgsFromJSONTyped,
    CreditPlanInputArgsToJSON,
} from './CreditPlanInputArgs';
import {
    DiscountInputArgs,
    DiscountInputArgsFromJSON,
    DiscountInputArgsFromJSONTyped,
    DiscountInputArgsToJSON,
} from './DiscountInputArgs';
import {
    FeatureInputArgs,
    FeatureInputArgsFromJSON,
    FeatureInputArgsFromJSONTyped,
    FeatureInputArgsToJSON,
} from './FeatureInputArgs';
import {
    LimitInputArgs,
    LimitInputArgsFromJSON,
    LimitInputArgsFromJSONTyped,
    LimitInputArgsToJSON,
} from './LimitInputArgs';
import {
    SubscriptionAddOnInput,
    SubscriptionAddOnInputFromJSON,
    SubscriptionAddOnInputFromJSONTyped,
    SubscriptionAddOnInputToJSON,
} from './SubscriptionAddOnInput';
import {
    TrialInputArgs,
    TrialInputArgsFromJSON,
    TrialInputArgsFromJSONTyped,
    TrialInputArgsToJSON,
} from './TrialInputArgs';

/**
 * 
 * @export
 * @interface UpdateSubscriptionArgs
 */
export interface UpdateSubscriptionArgs {
    /**
     * The name of the price plan to subscribe customer to. Either provide price plan UUID or name/tag but not both.
     * @type {string}
     * @memberof UpdateSubscriptionArgs
     */
    pricePlanName?: string;
    /**
     * DEPRECATED - use discounts field
     * @type {DiscountInputArgs}
     * @memberof UpdateSubscriptionArgs
     */
    discountOverride?: DiscountInputArgs | null;
    /**
     * The tag of the specific price plan version for the given price_plan_name. Should only be set if identifying price plan by name.
     * @type {string}
     * @memberof UpdateSubscriptionArgs
     */
    pricePlanTag?: string;
    /**
     * 
     * @type {Array<SubscriptionAddOnInput>}
     * @memberof UpdateSubscriptionArgs
     */
    addOns?: Array<SubscriptionAddOnInput> | null;
    /**
     * Boolean that indicates whether to update the subscription at the start of the billing cycle. If 'true' and either of `effective_at` or `at_cycle_end` are set, will return an error.
     * @type {boolean}
     * @memberof UpdateSubscriptionArgs
     */
    atCycleStart?: boolean;
    /**
     * 
     * @type {Array<FeatureInputArgs>}
     * @memberof UpdateSubscriptionArgs
     */
    featuresOverride?: Array<FeatureInputArgs> | null;
    /**
     * Credit plan associated with this subscription.
     * @type {CreditPlanInputArgs}
     * @memberof UpdateSubscriptionArgs
     */
    creditPlan?: CreditPlanInputArgs | null;
    /**
     * 
     * @type {TrialInputArgs}
     * @memberof UpdateSubscriptionArgs
     */
    trialOverride?: TrialInputArgs | null;
    /**
     * 
     * @type {Date}
     * @memberof UpdateSubscriptionArgs
     */
    effectiveAt?: Date;
    /**
     * The UUID of the specific price plan version to subscribe customer to. Either provide price plan UUID or name/tag but not both.
     * @type {string}
     * @memberof UpdateSubscriptionArgs
     */
    pricePlanUuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSubscriptionArgs
     */
    couponOverrideName?: string;
    /**
     * 
     * @type {Array<DiscountInputArgs>}
     * @memberof UpdateSubscriptionArgs
     */
    discounts?: Array<DiscountInputArgs>;
    /**
     * 
     * @type {Array<LimitInputArgs>}
     * @memberof UpdateSubscriptionArgs
     */
    limitsOverride?: Array<LimitInputArgs> | null;
    /**
     * Boolean that indicates whether to update the subscription at the end of the billing cycle. If 'true' and either of `effective_at` or `at_cycle_start` are set, will return an error.
     * @type {boolean}
     * @memberof UpdateSubscriptionArgs
     */
    atCycleEnd?: boolean;
    /**
     * Whether to align this subscripton's billing cycles to calendar boundaries (e.g., begining of every month). If the subscripiton is effective as of the middle of the month, the first cycle will be prorated appropriately.
     * @type {boolean}
     * @memberof UpdateSubscriptionArgs
     */
    alignToCalendar?: boolean;
}

export function UpdateSubscriptionArgsFromJSON(json: any): UpdateSubscriptionArgs {
    return UpdateSubscriptionArgsFromJSONTyped(json, false);
}

export function UpdateSubscriptionArgsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateSubscriptionArgs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pricePlanName': !exists(json, 'price_plan_name') ? undefined : json['price_plan_name'],
        'discountOverride': !exists(json, 'discount_override') ? undefined : DiscountInputArgsFromJSON(json['discount_override']),
        'pricePlanTag': !exists(json, 'price_plan_tag') ? undefined : json['price_plan_tag'],
        'addOns': !exists(json, 'add_ons') ? undefined : (json['add_ons'] === null ? null : (json['add_ons'] as Array<any>).map(SubscriptionAddOnInputFromJSON)),
        'atCycleStart': !exists(json, 'at_cycle_start') ? undefined : json['at_cycle_start'],
        'featuresOverride': !exists(json, 'features_override') ? undefined : (json['features_override'] === null ? null : (json['features_override'] as Array<any>).map(FeatureInputArgsFromJSON)),
        'creditPlan': !exists(json, 'credit_plan') ? undefined : CreditPlanInputArgsFromJSON(json['credit_plan']),
        'trialOverride': !exists(json, 'trial_override') ? undefined : TrialInputArgsFromJSON(json['trial_override']),
        'effectiveAt': !exists(json, 'effective_at') ? undefined : (new Date(json['effective_at'])),
        'pricePlanUuid': !exists(json, 'price_plan_uuid') ? undefined : json['price_plan_uuid'],
        'couponOverrideName': !exists(json, 'coupon_override_name') ? undefined : json['coupon_override_name'],
        'discounts': !exists(json, 'discounts') ? undefined : ((json['discounts'] as Array<any>).map(DiscountInputArgsFromJSON)),
        'limitsOverride': !exists(json, 'limits_override') ? undefined : (json['limits_override'] === null ? null : (json['limits_override'] as Array<any>).map(LimitInputArgsFromJSON)),
        'atCycleEnd': !exists(json, 'at_cycle_end') ? undefined : json['at_cycle_end'],
        'alignToCalendar': !exists(json, 'align_to_calendar') ? undefined : json['align_to_calendar'],
    };
}

export function UpdateSubscriptionArgsToJSON(value?: UpdateSubscriptionArgs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'price_plan_name': value.pricePlanName,
        'discount_override': DiscountInputArgsToJSON(value.discountOverride),
        'price_plan_tag': value.pricePlanTag,
        'add_ons': value.addOns === undefined ? undefined : (value.addOns === null ? null : (value.addOns as Array<any>).map(SubscriptionAddOnInputToJSON)),
        'at_cycle_start': value.atCycleStart,
        'features_override': value.featuresOverride === undefined ? undefined : (value.featuresOverride === null ? null : (value.featuresOverride as Array<any>).map(FeatureInputArgsToJSON)),
        'credit_plan': CreditPlanInputArgsToJSON(value.creditPlan),
        'trial_override': TrialInputArgsToJSON(value.trialOverride),
        'effective_at': value.effectiveAt === undefined ? undefined : (value.effectiveAt.toISOString()),
        'price_plan_uuid': value.pricePlanUuid,
        'coupon_override_name': value.couponOverrideName,
        'discounts': value.discounts === undefined ? undefined : ((value.discounts as Array<any>).map(DiscountInputArgsToJSON)),
        'limits_override': value.limitsOverride === undefined ? undefined : (value.limitsOverride === null ? null : (value.limitsOverride as Array<any>).map(LimitInputArgsToJSON)),
        'at_cycle_end': value.atCycleEnd,
        'align_to_calendar': value.alignToCalendar,
    };
}

