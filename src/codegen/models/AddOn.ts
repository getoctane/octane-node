/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Feature,
    FeatureFromJSON,
    FeatureFromJSONTyped,
    FeatureToJSON,
} from './Feature';
import {
    PriceTier,
    PriceTierFromJSON,
    PriceTierFromJSONTyped,
    PriceTierToJSON,
} from './PriceTier';

/**
 * 
 * @export
 * @interface AddOn
 */
export interface AddOn {
    /**
     * 
     * @type {Feature}
     * @memberof AddOn
     */
    feature: Feature;
    /**
     * Price of the add on
     * @type {number}
     * @memberof AddOn
     */
    price: number;
    /**
     * Array of price tiers, each of which consists of `price` and `cap` key:value pairs
     * @type {Array<PriceTier>}
     * @memberof AddOn
     */
    prices?: Array<PriceTier>;
    /**
     * The price scheme of the add on. One of 'FLAT' or 'TIERED'
     * @type {string}
     * @memberof AddOn
     */
    priceSchemeType: string;
    /**
     * If true, customer is just charged once in the first billing cycle.
     * @type {boolean}
     * @memberof AddOn
     */
    singleUse: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AddOn
     */
    quantityEnabled: boolean;
    /**
     * If true, immediately invoice the customer for this add on.
     * @type {boolean}
     * @memberof AddOn
     */
    immediatelyCharge?: boolean;
    /**
     * The maximum number of add-ons that an end-customer can apply to their subscription.
     * @type {number}
     * @memberof AddOn
     */
    limit?: number;
    /**
     * The frequency at which to price this add on.
     * @type {number}
     * @memberof AddOn
     */
    priceFrequency?: number;
    /**
     * The frequency at which to charge this add on. Currently the only values supported are price_frequency or 1.
     * @type {number}
     * @memberof AddOn
     */
    chargeFrequency?: number;
}

export function AddOnFromJSON(json: any): AddOn {
    return AddOnFromJSONTyped(json, false);
}

export function AddOnFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddOn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'feature': FeatureFromJSON(json['feature']),
        'price': json['price'],
        'prices': !exists(json, 'prices') ? undefined : ((json['prices'] as Array<any>).map(PriceTierFromJSON)),
        'priceSchemeType': json['price_scheme_type'],
        'singleUse': json['single_use'],
        'quantityEnabled': json['quantity_enabled'],
        'immediatelyCharge': !exists(json, 'immediately_charge') ? undefined : json['immediately_charge'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'priceFrequency': !exists(json, 'price_frequency') ? undefined : json['price_frequency'],
        'chargeFrequency': !exists(json, 'charge_frequency') ? undefined : json['charge_frequency'],
    };
}

export function AddOnToJSON(value?: AddOn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'feature': FeatureToJSON(value.feature),
        'price': value.price,
        'prices': value.prices === undefined ? undefined : ((value.prices as Array<any>).map(PriceTierToJSON)),
        'price_scheme_type': value.priceSchemeType,
        'single_use': value.singleUse,
        'quantity_enabled': value.quantityEnabled,
        'immediately_charge': value.immediatelyCharge,
        'limit': value.limit,
        'price_frequency': value.priceFrequency,
        'charge_frequency': value.chargeFrequency,
    };
}

