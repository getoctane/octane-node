/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MeterLabelFilterArgs,
    MeterLabelFilterArgsFromJSON,
    MeterLabelFilterArgsFromJSONTyped,
    MeterLabelFilterArgsToJSON,
} from './MeterLabelFilterArgs';

/**
 * 
 * @export
 * @interface MeterLabelFilterOrExpressionArgs
 */
export interface MeterLabelFilterOrExpressionArgs {
    /**
     * The logical operator to apply to the list of filters or expressions. Should be set if `is_expression` is True.
     * @type {string}
     * @memberof MeterLabelFilterOrExpressionArgs
     */
    expressionOperator?: MeterLabelFilterOrExpressionArgsExpressionOperatorEnum;
    /**
     * If true, will wrap this filter/expression with a NOT.
     * @type {boolean}
     * @memberof MeterLabelFilterOrExpressionArgs
     */
    notFilter?: boolean;
    /**
     * The filter to apply. Should be set if `is_expression` is False.
     * @type {MeterLabelFilterArgs}
     * @memberof MeterLabelFilterOrExpressionArgs
     */
    filter?: MeterLabelFilterArgs | null;
    /**
     * Whether this is a filter or an expression.
     * @type {boolean}
     * @memberof MeterLabelFilterOrExpressionArgs
     */
    isExpression?: boolean;
    /**
     * The list of filters or expressions to apply. Should be set if `is_expression` is True.
     * @type {Array<MeterLabelFilterOrExpressionArgs>}
     * @memberof MeterLabelFilterOrExpressionArgs
     */
    filters?: Array<MeterLabelFilterOrExpressionArgs>;
}

/**
* @export
* @enum {string}
*/
export enum MeterLabelFilterOrExpressionArgsExpressionOperatorEnum {
    And = 'AND',
    Or = 'OR'
}

export function MeterLabelFilterOrExpressionArgsFromJSON(json: any): MeterLabelFilterOrExpressionArgs {
    return MeterLabelFilterOrExpressionArgsFromJSONTyped(json, false);
}

export function MeterLabelFilterOrExpressionArgsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeterLabelFilterOrExpressionArgs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'expressionOperator': !exists(json, 'expression_operator') ? undefined : json['expression_operator'],
        'notFilter': !exists(json, 'not_filter') ? undefined : json['not_filter'],
        'filter': !exists(json, 'filter') ? undefined : MeterLabelFilterArgsFromJSON(json['filter']),
        'isExpression': !exists(json, 'is_expression') ? undefined : json['is_expression'],
        'filters': !exists(json, 'filters') ? undefined : ((json['filters'] as Array<any>).map(MeterLabelFilterOrExpressionArgsFromJSON)),
    };
}

export function MeterLabelFilterOrExpressionArgsToJSON(value?: MeterLabelFilterOrExpressionArgs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'expression_operator': value.expressionOperator,
        'not_filter': value.notFilter,
        'filter': MeterLabelFilterArgsToJSON(value.filter),
        'is_expression': value.isExpression,
        'filters': value.filters === undefined ? undefined : ((value.filters as Array<any>).map(MeterLabelFilterOrExpressionArgsToJSON)),
    };
}

