/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DailyUsageSchemaV2,
    DailyUsageSchemaV2FromJSON,
    DailyUsageSchemaV2FromJSONTyped,
    DailyUsageSchemaV2ToJSON,
} from './DailyUsageSchemaV2';

/**
 * 
 * @export
 * @interface CustomerPortalUsageByTime
 */
export interface CustomerPortalUsageByTime {
    /**
     * Display name of the meter.
     * @type {string}
     * @memberof CustomerPortalUsageByTime
     */
    meterDisplayName?: string;
    /**
     * 
     * @type {Array<DailyUsageSchemaV2>}
     * @memberof CustomerPortalUsageByTime
     */
    usageByTime?: Array<DailyUsageSchemaV2>;
    /**
     * Name of the unit the meter uses.
     * @type {string}
     * @memberof CustomerPortalUsageByTime
     */
    unitName?: string;
    /**
     * The start date in UTC.
     * @type {Date}
     * @memberof CustomerPortalUsageByTime
     */
    startTime?: Date;
    /**
     * Name of the meter.
     * @type {string}
     * @memberof CustomerPortalUsageByTime
     */
    meterName?: string;
    /**
     * The end date in UTC.
     * @type {Date}
     * @memberof CustomerPortalUsageByTime
     */
    endTime?: Date;
    /**
     * Total usage in date range.
     * @type {number}
     * @memberof CustomerPortalUsageByTime
     */
    totalUsage?: number;
}

export function CustomerPortalUsageByTimeFromJSON(json: any): CustomerPortalUsageByTime {
    return CustomerPortalUsageByTimeFromJSONTyped(json, false);
}

export function CustomerPortalUsageByTimeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerPortalUsageByTime {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'meterDisplayName': !exists(json, 'meter_display_name') ? undefined : json['meter_display_name'],
        'usageByTime': !exists(json, 'usage_by_time') ? undefined : ((json['usage_by_time'] as Array<any>).map(DailyUsageSchemaV2FromJSON)),
        'unitName': !exists(json, 'unit_name') ? undefined : json['unit_name'],
        'startTime': !exists(json, 'start_time') ? undefined : (new Date(json['start_time'])),
        'meterName': !exists(json, 'meter_name') ? undefined : json['meter_name'],
        'endTime': !exists(json, 'end_time') ? undefined : (new Date(json['end_time'])),
        'totalUsage': !exists(json, 'total_usage') ? undefined : json['total_usage'],
    };
}

export function CustomerPortalUsageByTimeToJSON(value?: CustomerPortalUsageByTime | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'meter_display_name': value.meterDisplayName,
        'usage_by_time': value.usageByTime === undefined ? undefined : ((value.usageByTime as Array<any>).map(DailyUsageSchemaV2ToJSON)),
        'unit_name': value.unitName,
        'start_time': value.startTime === undefined ? undefined : (value.startTime.toISOString()),
        'meter_name': value.meterName,
        'end_time': value.endTime === undefined ? undefined : (value.endTime.toISOString()),
        'total_usage': value.totalUsage,
    };
}

