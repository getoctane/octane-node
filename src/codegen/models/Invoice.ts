/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LineItems,
    LineItemsFromJSON,
    LineItemsFromJSONTyped,
    LineItemsToJSON,
} from './LineItems';

/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * Total amount due
     * @type {number}
     * @memberof Invoice
     */
    amountDue?: number;
    /**
     * Any discount credits applied to the invoice
     * @type {number}
     * @memberof Invoice
     */
    discountCredit?: number;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    dueDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    endTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    id?: string;
    /**
     * The number of retries done to send the invoice
     * @type {number}
     * @memberof Invoice
     */
    invoiceRetryAttempt?: number;
    /**
     * Non-empty string if there was an error while sending out invoice
     * @type {string}
     * @memberof Invoice
     */
    invoicingError?: string;
    /**
     * False if not approved
     * @type {boolean}
     * @memberof Invoice
     */
    isApproved?: boolean;
    /**
     * False if invoice has not been sent to the customer
     * @type {boolean}
     * @memberof Invoice
     */
    isInvoiced?: boolean;
    /**
     * False if not paid yet
     * @type {boolean}
     * @memberof Invoice
     */
    isPaid?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    latestInvoiceAttemptAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    latestPaymentAttemptAt?: Date;
    /**
     * 
     * @type {Array<LineItems>}
     * @memberof Invoice
     */
    lineItems?: Array<LineItems>;
    /**
     * Non-empty string if there was an error while processing payment
     * @type {string}
     * @memberof Invoice
     */
    paymentError?: string;
    /**
     * The number of retries done to process the payment
     * @type {number}
     * @memberof Invoice
     */
    paymentRetryAttempt?: number;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    startTime?: Date;
    /**
     * Amount due before any credits are applied
     * @type {number}
     * @memberof Invoice
     */
    subTotal?: number;
}

export function InvoiceFromJSON(json: any): Invoice {
    return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amountDue': !exists(json, 'amount_due') ? undefined : json['amount_due'],
        'discountCredit': !exists(json, 'discount_credit') ? undefined : json['discount_credit'],
        'dueDate': !exists(json, 'due_date') ? undefined : (new Date(json['due_date'])),
        'endTime': !exists(json, 'end_time') ? undefined : (new Date(json['end_time'])),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'invoiceRetryAttempt': !exists(json, 'invoice_retry_attempt') ? undefined : json['invoice_retry_attempt'],
        'invoicingError': !exists(json, 'invoicing_error') ? undefined : json['invoicing_error'],
        'isApproved': !exists(json, 'is_approved') ? undefined : json['is_approved'],
        'isInvoiced': !exists(json, 'is_invoiced') ? undefined : json['is_invoiced'],
        'isPaid': !exists(json, 'is_paid') ? undefined : json['is_paid'],
        'latestInvoiceAttemptAt': !exists(json, 'latest_invoice_attempt_at') ? undefined : (new Date(json['latest_invoice_attempt_at'])),
        'latestPaymentAttemptAt': !exists(json, 'latest_payment_attempt_at') ? undefined : (new Date(json['latest_payment_attempt_at'])),
        'lineItems': !exists(json, 'line_items') ? undefined : ((json['line_items'] as Array<any>).map(LineItemsFromJSON)),
        'paymentError': !exists(json, 'payment_error') ? undefined : json['payment_error'],
        'paymentRetryAttempt': !exists(json, 'payment_retry_attempt') ? undefined : json['payment_retry_attempt'],
        'startTime': !exists(json, 'start_time') ? undefined : (new Date(json['start_time'])),
        'subTotal': !exists(json, 'sub_total') ? undefined : json['sub_total'],
    };
}

export function InvoiceToJSON(value?: Invoice | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount_due': value.amountDue,
        'discount_credit': value.discountCredit,
        'due_date': value.dueDate === undefined ? undefined : (value.dueDate.toISOString()),
        'end_time': value.endTime === undefined ? undefined : (value.endTime.toISOString()),
        'id': value.id,
        'invoice_retry_attempt': value.invoiceRetryAttempt,
        'invoicing_error': value.invoicingError,
        'is_approved': value.isApproved,
        'is_invoiced': value.isInvoiced,
        'is_paid': value.isPaid,
        'latest_invoice_attempt_at': value.latestInvoiceAttemptAt === undefined ? undefined : (value.latestInvoiceAttemptAt.toISOString()),
        'latest_payment_attempt_at': value.latestPaymentAttemptAt === undefined ? undefined : (value.latestPaymentAttemptAt.toISOString()),
        'line_items': value.lineItems === undefined ? undefined : ((value.lineItems as Array<any>).map(LineItemsToJSON)),
        'payment_error': value.paymentError,
        'payment_retry_attempt': value.paymentRetryAttempt,
        'start_time': value.startTime === undefined ? undefined : (value.startTime.toISOString()),
        'sub_total': value.subTotal,
    };
}

