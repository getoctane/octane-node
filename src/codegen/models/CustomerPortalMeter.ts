/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CustomerPortalMeterLabels,
    CustomerPortalMeterLabelsFromJSON,
    CustomerPortalMeterLabelsFromJSONTyped,
    CustomerPortalMeterLabelsToJSON,
} from './CustomerPortalMeterLabels';
import {
    CustomerPortalMeterLabelsWithDisplayName,
    CustomerPortalMeterLabelsWithDisplayNameFromJSON,
    CustomerPortalMeterLabelsWithDisplayNameFromJSONTyped,
    CustomerPortalMeterLabelsWithDisplayNameToJSON,
} from './CustomerPortalMeterLabelsWithDisplayName';

/**
 * 
 * @export
 * @interface CustomerPortalMeter
 */
export interface CustomerPortalMeter {
    /**
     * Name of the unit the meter uses.
     * @type {string}
     * @memberof CustomerPortalMeter
     */
    unitName?: string;
    /**
     * Name of the meter.
     * @type {string}
     * @memberof CustomerPortalMeter
     */
    meterName?: string;
    /**
     * Aggregation of meter. E.g. SUM, TIME_WEIGHTED_SUM, MAX, or LATEST.
     * @type {string}
     * @memberof CustomerPortalMeter
     */
    aggregation?: string;
    /**
     * The raw and prettified label keys and values
     * @type {Array<CustomerPortalMeterLabelsWithDisplayName>}
     * @memberof CustomerPortalMeter
     */
    labelsWithDisplayNames?: Array<CustomerPortalMeterLabelsWithDisplayName>;
    /**
     * Type of meter data. E.g. DISCRETE or CONTINUOUS.
     * @type {string}
     * @memberof CustomerPortalMeter
     */
    dataType?: string;
    /**
     * Primary labels with keys and values
     * @type {Array<CustomerPortalMeterLabels>}
     * @memberof CustomerPortalMeter
     */
    labels?: Array<CustomerPortalMeterLabels>;
    /**
     * Type of the meter. E.g. COUNTER or GAUGE.
     * @type {string}
     * @memberof CustomerPortalMeter
     */
    meterType?: string;
    /**
     * Display name of the meter.
     * @type {string}
     * @memberof CustomerPortalMeter
     */
    meterDisplayName?: string;
}

export function CustomerPortalMeterFromJSON(json: any): CustomerPortalMeter {
    return CustomerPortalMeterFromJSONTyped(json, false);
}

export function CustomerPortalMeterFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerPortalMeter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'unitName': !exists(json, 'unit_name') ? undefined : json['unit_name'],
        'meterName': !exists(json, 'meter_name') ? undefined : json['meter_name'],
        'aggregation': !exists(json, 'aggregation') ? undefined : json['aggregation'],
        'labelsWithDisplayNames': !exists(json, 'labels_with_display_names') ? undefined : ((json['labels_with_display_names'] as Array<any>).map(CustomerPortalMeterLabelsWithDisplayNameFromJSON)),
        'dataType': !exists(json, 'data_type') ? undefined : json['data_type'],
        'labels': !exists(json, 'labels') ? undefined : ((json['labels'] as Array<any>).map(CustomerPortalMeterLabelsFromJSON)),
        'meterType': !exists(json, 'meter_type') ? undefined : json['meter_type'],
        'meterDisplayName': !exists(json, 'meter_display_name') ? undefined : json['meter_display_name'],
    };
}

export function CustomerPortalMeterToJSON(value?: CustomerPortalMeter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'unit_name': value.unitName,
        'meter_name': value.meterName,
        'aggregation': value.aggregation,
        'labels_with_display_names': value.labelsWithDisplayNames === undefined ? undefined : ((value.labelsWithDisplayNames as Array<any>).map(CustomerPortalMeterLabelsWithDisplayNameToJSON)),
        'data_type': value.dataType,
        'labels': value.labels === undefined ? undefined : ((value.labels as Array<any>).map(CustomerPortalMeterLabelsToJSON)),
        'meter_type': value.meterType,
        'meter_display_name': value.meterDisplayName,
    };
}

