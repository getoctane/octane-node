/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BillingCycleDate,
    BillingCycleDateFromJSON,
    BillingCycleDateFromJSONTyped,
    BillingCycleDateToJSON,
} from './BillingCycleDate';
import {
    CreditPlan,
    CreditPlanFromJSON,
    CreditPlanFromJSONTyped,
    CreditPlanToJSON,
} from './CreditPlan';
import {
    Discount,
    DiscountFromJSON,
    DiscountFromJSONTyped,
    DiscountToJSON,
} from './Discount';
import {
    Feature,
    FeatureFromJSON,
    FeatureFromJSONTyped,
    FeatureToJSON,
} from './Feature';
import {
    Limit,
    LimitFromJSON,
    LimitFromJSONTyped,
    LimitToJSON,
} from './Limit';
import {
    PricePlan,
    PricePlanFromJSON,
    PricePlanFromJSONTyped,
    PricePlanToJSON,
} from './PricePlan';
import {
    Trial,
    TrialFromJSON,
    TrialFromJSONTyped,
    TrialToJSON,
} from './Trial';

/**
 * 
 * @export
 * @interface ActiveSubscription
 */
export interface ActiveSubscription {
    /**
     * 
     * @type {string}
     * @memberof ActiveSubscription
     */
    uuid: string;
    /**
     * Unique name identifier of a customer
     * @type {any}
     * @memberof ActiveSubscription
     */
    customerName: any | null;
    /**
     * Unique name indentifier of a price plan
     * @type {any}
     * @memberof ActiveSubscription
     */
    readonly pricePlanName: any | null;
    /**
     * External facing unique identifier of a price plan
     * @type {any}
     * @memberof ActiveSubscription
     */
    readonly pricePlanUuid: any | null;
    /**
     * Price plan associated with this subscription.
     * @type {PricePlan}
     * @memberof ActiveSubscription
     */
    pricePlan?: PricePlan | null;
    /**
     * 
     * @type {Array<Discount>}
     * @memberof ActiveSubscription
     */
    discounts?: Array<Discount>;
    /**
     * 
     * @type {any}
     * @memberof ActiveSubscription
     */
    readonly addOns?: any | null;
    /**
     * Optional trial override for the associated subscription.
     * @type {Trial}
     * @memberof ActiveSubscription
     */
    trialOverride?: Trial | null;
    /**
     * 
     * @type {Array<Feature>}
     * @memberof ActiveSubscription
     */
    featuresOverride?: Array<Feature>;
    /**
     * 
     * @type {Array<Limit>}
     * @memberof ActiveSubscription
     */
    limitsOverride?: Array<Limit>;
    /**
     * ISO-8601 formatted timestamp that defines when the subscription should take effect. If this field is omitted, the subscription is effective upon creation.
     * @type {Date}
     * @memberof ActiveSubscription
     */
    effectiveAt?: Date;
    /**
     * ISO-8601 formatted timestamp that defines when the subscription will expire.
     * @type {Date}
     * @memberof ActiveSubscription
     */
    expiredAt?: Date | null;
    /**
     * Credit plan associated with this subscription.
     * @type {CreditPlan}
     * @memberof ActiveSubscription
     */
    creditPlan?: CreditPlan | null;
    /**
     * Align billing cycles to a calendar unit if true. For example if the period is month, cycles will end on the first of every month.
     * @type {boolean}
     * @memberof ActiveSubscription
     */
    alignToCalendar?: boolean;
    /**
     * Optional base price override for the associated subscription.
     * @type {number}
     * @memberof ActiveSubscription
     */
    basePriceOverride?: number | null;
    /**
     * 
     * @type {BillingCycleDate}
     * @memberof ActiveSubscription
     */
    currentBillingCycle?: BillingCycleDate;
    /**
     * 
     * @type {number}
     * @memberof ActiveSubscription
     */
    totalFixedPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof ActiveSubscription
     */
    discountedFixedPrice?: number;
}

export function ActiveSubscriptionFromJSON(json: any): ActiveSubscription {
    return ActiveSubscriptionFromJSONTyped(json, false);
}

export function ActiveSubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActiveSubscription {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'customerName': json['customer_name'],
        'pricePlanName': json['price_plan_name'],
        'pricePlanUuid': json['price_plan_uuid'],
        'pricePlan': !exists(json, 'price_plan') ? undefined : PricePlanFromJSON(json['price_plan']),
        'discounts': !exists(json, 'discounts') ? undefined : ((json['discounts'] as Array<any>).map(DiscountFromJSON)),
        'addOns': !exists(json, 'add_ons') ? undefined : json['add_ons'],
        'trialOverride': !exists(json, 'trial_override') ? undefined : TrialFromJSON(json['trial_override']),
        'featuresOverride': !exists(json, 'features_override') ? undefined : ((json['features_override'] as Array<any>).map(FeatureFromJSON)),
        'limitsOverride': !exists(json, 'limits_override') ? undefined : ((json['limits_override'] as Array<any>).map(LimitFromJSON)),
        'effectiveAt': !exists(json, 'effective_at') ? undefined : (new Date(json['effective_at'])),
        'expiredAt': !exists(json, 'expired_at') ? undefined : (json['expired_at'] === null ? null : new Date(json['expired_at'])),
        'creditPlan': !exists(json, 'credit_plan') ? undefined : CreditPlanFromJSON(json['credit_plan']),
        'alignToCalendar': !exists(json, 'align_to_calendar') ? undefined : json['align_to_calendar'],
        'basePriceOverride': !exists(json, 'base_price_override') ? undefined : json['base_price_override'],
        'currentBillingCycle': !exists(json, 'current_billing_cycle') ? undefined : BillingCycleDateFromJSON(json['current_billing_cycle']),
        'totalFixedPrice': !exists(json, 'total_fixed_price') ? undefined : json['total_fixed_price'],
        'discountedFixedPrice': !exists(json, 'discounted_fixed_price') ? undefined : json['discounted_fixed_price'],
    };
}

export function ActiveSubscriptionToJSON(value?: ActiveSubscription | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'customer_name': value.customerName,
        'price_plan': PricePlanToJSON(value.pricePlan),
        'discounts': value.discounts === undefined ? undefined : ((value.discounts as Array<any>).map(DiscountToJSON)),
        'trial_override': TrialToJSON(value.trialOverride),
        'features_override': value.featuresOverride === undefined ? undefined : ((value.featuresOverride as Array<any>).map(FeatureToJSON)),
        'limits_override': value.limitsOverride === undefined ? undefined : ((value.limitsOverride as Array<any>).map(LimitToJSON)),
        'effective_at': value.effectiveAt === undefined ? undefined : (value.effectiveAt.toISOString()),
        'expired_at': value.expiredAt === undefined ? undefined : (value.expiredAt === null ? null : value.expiredAt.toISOString()),
        'credit_plan': CreditPlanToJSON(value.creditPlan),
        'align_to_calendar': value.alignToCalendar,
        'base_price_override': value.basePriceOverride,
        'current_billing_cycle': BillingCycleDateToJSON(value.currentBillingCycle),
        'total_fixed_price': value.totalFixedPrice,
        'discounted_fixed_price': value.discountedFixedPrice,
    };
}

