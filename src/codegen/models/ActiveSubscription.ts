/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BillingCycleDate,
    BillingCycleDateFromJSON,
    BillingCycleDateFromJSONTyped,
    BillingCycleDateToJSON,
} from './BillingCycleDate';
import {
    Discount,
    DiscountFromJSON,
    DiscountFromJSONTyped,
    DiscountToJSON,
} from './Discount';
import {
    Feature,
    FeatureFromJSON,
    FeatureFromJSONTyped,
    FeatureToJSON,
} from './Feature';
import {
    Limit,
    LimitFromJSON,
    LimitFromJSONTyped,
    LimitToJSON,
} from './Limit';
import {
    PricePlan,
    PricePlanFromJSON,
    PricePlanFromJSONTyped,
    PricePlanToJSON,
} from './PricePlan';
import {
    SubscriptionAddOn,
    SubscriptionAddOnFromJSON,
    SubscriptionAddOnFromJSONTyped,
    SubscriptionAddOnToJSON,
} from './SubscriptionAddOn';
import {
    Trial,
    TrialFromJSON,
    TrialFromJSONTyped,
    TrialToJSON,
} from './Trial';

/**
 * 
 * @export
 * @interface ActiveSubscription
 */
export interface ActiveSubscription {
    /**
     * 
     * @type {Array<SubscriptionAddOn>}
     * @memberof ActiveSubscription
     */
    addOns?: Array<SubscriptionAddOn>;
    /**
     * Align billing cycles to a calendar unit if true. For example if the period is month, cycles will end on the first of every month.
     * @type {boolean}
     * @memberof ActiveSubscription
     */
    alignToCalendar?: boolean;
    /**
     * Optional base price override for the associated subscription.
     * @type {number}
     * @memberof ActiveSubscription
     */
    basePriceOverride?: number | null;
    /**
     * 
     * @type {BillingCycleDate}
     * @memberof ActiveSubscription
     */
    currentBillingCycle?: BillingCycleDate;
    /**
     * Unique name identifier of a customer
     * @type {any}
     * @memberof ActiveSubscription
     */
    customerName: any | null;
    /**
     * Optional discount override for the associated subscription.
     * @type {Discount}
     * @memberof ActiveSubscription
     */
    discountOverride?: Discount | null;
    /**
     * ISO-8601 formatted timestamp that defines when the subscription should take effect. If this field is omitted, the subscription is effective upon creation.
     * @type {Date}
     * @memberof ActiveSubscription
     */
    effectiveAt?: Date;
    /**
     * 
     * @type {Array<Feature>}
     * @memberof ActiveSubscription
     */
    featuresOverride?: Array<Feature>;
    /**
     * 
     * @type {Array<Limit>}
     * @memberof ActiveSubscription
     */
    limitsOverride?: Array<Limit>;
    /**
     * Price plan associated with this subscription.
     * @type {PricePlan}
     * @memberof ActiveSubscription
     */
    pricePlan?: PricePlan | null;
    /**
     * Unique name indentifier of a price plan
     * @type {any}
     * @memberof ActiveSubscription
     */
    readonly pricePlanName: any | null;
    /**
     * Optional trial override for the associated subscription.
     * @type {Trial}
     * @memberof ActiveSubscription
     */
    trialOverride?: Trial | null;
}

export function ActiveSubscriptionFromJSON(json: any): ActiveSubscription {
    return ActiveSubscriptionFromJSONTyped(json, false);
}

export function ActiveSubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActiveSubscription {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addOns': !exists(json, 'add_ons') ? undefined : ((json['add_ons'] as Array<any>).map(SubscriptionAddOnFromJSON)),
        'alignToCalendar': !exists(json, 'align_to_calendar') ? undefined : json['align_to_calendar'],
        'basePriceOverride': !exists(json, 'base_price_override') ? undefined : json['base_price_override'],
        'currentBillingCycle': !exists(json, 'current_billing_cycle') ? undefined : BillingCycleDateFromJSON(json['current_billing_cycle']),
        'customerName': json['customer_name'],
        'discountOverride': !exists(json, 'discount_override') ? undefined : DiscountFromJSON(json['discount_override']),
        'effectiveAt': !exists(json, 'effective_at') ? undefined : (new Date(json['effective_at'])),
        'featuresOverride': !exists(json, 'features_override') ? undefined : ((json['features_override'] as Array<any>).map(FeatureFromJSON)),
        'limitsOverride': !exists(json, 'limits_override') ? undefined : ((json['limits_override'] as Array<any>).map(LimitFromJSON)),
        'pricePlan': !exists(json, 'price_plan') ? undefined : PricePlanFromJSON(json['price_plan']),
        'pricePlanName': json['price_plan_name'],
        'trialOverride': !exists(json, 'trial_override') ? undefined : TrialFromJSON(json['trial_override']),
    };
}

export function ActiveSubscriptionToJSON(value?: ActiveSubscription | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'add_ons': value.addOns === undefined ? undefined : ((value.addOns as Array<any>).map(SubscriptionAddOnToJSON)),
        'align_to_calendar': value.alignToCalendar,
        'base_price_override': value.basePriceOverride,
        'current_billing_cycle': BillingCycleDateToJSON(value.currentBillingCycle),
        'customer_name': value.customerName,
        'discount_override': DiscountToJSON(value.discountOverride),
        'effective_at': value.effectiveAt === undefined ? undefined : (value.effectiveAt.toISOString()),
        'features_override': value.featuresOverride === undefined ? undefined : ((value.featuresOverride as Array<any>).map(FeatureToJSON)),
        'limits_override': value.limitsOverride === undefined ? undefined : ((value.limitsOverride as Array<any>).map(LimitToJSON)),
        'price_plan': PricePlanToJSON(value.pricePlan),
        'trial_override': TrialToJSON(value.trialOverride),
    };
}

