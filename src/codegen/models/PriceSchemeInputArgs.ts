/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PriceInputArgs1,
    PriceInputArgs1FromJSON,
    PriceInputArgs1FromJSONTyped,
    PriceInputArgs1ToJSON,
} from './PriceInputArgs1';

/**
 * 
 * @export
 * @interface PriceSchemeInputArgs
 */
export interface PriceSchemeInputArgs {
    /**
     * The name of the unit used for this metered component (e.g., gigabyte)
     * @type {string}
     * @memberof PriceSchemeInputArgs
     */
    unitName?: string;
    /**
     * The frequency at which the meter should be tiered, in months. For example, if set to 12, the usage over the full year will be included when computing the tier. Only available for TIERED and STAIRSTEP scheme_types with a SUM or TIME_WEIGHTED_SUM meter.
     * @type {number}
     * @memberof PriceSchemeInputArgs
     */
    frequency?: number;
    /**
     * Array of (key, value) meter labels to price on & the price tiers that should be used against those labels
     * @type {Array<object>}
     * @memberof PriceSchemeInputArgs
     */
    priceList?: Array<object>;
    /**
     * One of 'FLAT', 'TIERED', or 'STAIRSTEP'
     * @type {string}
     * @memberof PriceSchemeInputArgs
     */
    schemeType: string;
    /**
     * The % increase/decrease in price after the minimum charge is reached (e.g., 25.5 -> 25.5% increase).
     * @type {number}
     * @memberof PriceSchemeInputArgs
     */
    postMinimumChargePercentageChange?: number;
    /**
     * Array of price tiers, each of which consists of `price` and `cap` key:value pairs
     * @type {Array<PriceInputArgs1>}
     * @memberof PriceSchemeInputArgs
     */
    prices?: Array<PriceInputArgs1>;
    /**
     * The time unit for the metered component (e.g., month or hour)
     * @type {string}
     * @memberof PriceSchemeInputArgs
     */
    timeUnitName?: string;
    /**
     * Size of the unit batch to use for the prices. Can only be set if scheme_type='FLAT' or 'TIERED'. E.g. To charge $10 per 100 API Requests, set batch_size to 100.
     * @type {number}
     * @memberof PriceSchemeInputArgs
     */
    batchSize?: number;
}

export function PriceSchemeInputArgsFromJSON(json: any): PriceSchemeInputArgs {
    return PriceSchemeInputArgsFromJSONTyped(json, false);
}

export function PriceSchemeInputArgsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PriceSchemeInputArgs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'unitName': !exists(json, 'unit_name') ? undefined : json['unit_name'],
        'frequency': !exists(json, 'frequency') ? undefined : json['frequency'],
        'priceList': !exists(json, 'price_list') ? undefined : json['price_list'],
        'schemeType': json['scheme_type'],
        'postMinimumChargePercentageChange': !exists(json, 'post_minimum_charge_percentage_change') ? undefined : json['post_minimum_charge_percentage_change'],
        'prices': !exists(json, 'prices') ? undefined : ((json['prices'] as Array<any>).map(PriceInputArgs1FromJSON)),
        'timeUnitName': !exists(json, 'time_unit_name') ? undefined : json['time_unit_name'],
        'batchSize': !exists(json, 'batch_size') ? undefined : json['batch_size'],
    };
}

export function PriceSchemeInputArgsToJSON(value?: PriceSchemeInputArgs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'unit_name': value.unitName,
        'frequency': value.frequency,
        'price_list': value.priceList,
        'scheme_type': value.schemeType,
        'post_minimum_charge_percentage_change': value.postMinimumChargePercentageChange,
        'prices': value.prices === undefined ? undefined : ((value.prices as Array<any>).map(PriceInputArgs1ToJSON)),
        'time_unit_name': value.timeUnitName,
        'batch_size': value.batchSize,
    };
}

