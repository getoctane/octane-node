/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RevenueRecognitionEntry,
    RevenueRecognitionEntryFromJSON,
    RevenueRecognitionEntryToJSON,
    RevenueRecognitionInput,
    RevenueRecognitionInputFromJSON,
    RevenueRecognitionInputToJSON,
} from '../models';

export interface RecognizedRevenuePostRequest {
    revenueRecognitionInput: RevenueRecognitionInput;
}

/**
 * 
 */
export class RevenueRecognitionApi extends runtime.BaseAPI {

    /**
     * Compute monthly recognized revenue
     * Compute monthly recognized revenue
     */
    async recognizedRevenuePostRaw(requestParameters: RecognizedRevenuePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RevenueRecognitionEntry>>> {
        if (requestParameters.revenueRecognitionInput === null || requestParameters.revenueRecognitionInput === undefined) {
            throw new runtime.RequiredError('revenueRecognitionInput','Required parameter requestParameters.revenueRecognitionInput was null or undefined when calling recognizedRevenuePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recognized_revenue/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueRecognitionInputToJSON(requestParameters.revenueRecognitionInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RevenueRecognitionEntryFromJSON));
    }

    /**
     * Compute monthly recognized revenue
     * Compute monthly recognized revenue
     */
    async recognizedRevenuePost(requestParameters: RecognizedRevenuePostRequest, initOverrides?: RequestInit): Promise<Array<RevenueRecognitionEntry>> {
        const response = await this.recognizedRevenuePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
