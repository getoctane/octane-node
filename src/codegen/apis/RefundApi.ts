/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateRefundArgs,
    CreateRefundArgsFromJSON,
    CreateRefundArgsToJSON,
    Refund,
    RefundFromJSON,
    RefundToJSON,
} from '../models';

export interface RefundPostRequest {
    createRefundArgs: CreateRefundArgs;
}

/**
 * 
 */
export class RefundApi extends runtime.BaseAPI {

    /**
     * Create a refund for a paid invoice.
     * Create Refund
     */
    async refundPostRaw(requestParameters: RefundPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Refund>> {
        if (requestParameters.createRefundArgs === null || requestParameters.createRefundArgs === undefined) {
            throw new runtime.RequiredError('createRefundArgs','Required parameter requestParameters.createRefundArgs was null or undefined when calling refundPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/refund/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRefundArgsToJSON(requestParameters.createRefundArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundFromJSON(jsonValue));
    }

    /**
     * Create a refund for a paid invoice.
     * Create Refund
     */
    async refundPost(requestParameters: RefundPostRequest, initOverrides?: RequestInit): Promise<Refund> {
        const response = await this.refundPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
