/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateCustomerQuickbooksConfigurationArgs,
    CreateCustomerQuickbooksConfigurationArgsFromJSON,
    CreateCustomerQuickbooksConfigurationArgsToJSON,
    CustomerQuickbooksConfiguration,
    CustomerQuickbooksConfigurationFromJSON,
    CustomerQuickbooksConfigurationToJSON,
    UpdateCustomerQuickbooksConfigurationArgs,
    UpdateCustomerQuickbooksConfigurationArgsFromJSON,
    UpdateCustomerQuickbooksConfigurationArgsToJSON,
    UpdateVendorQuickbooksConfigurationArgs,
    UpdateVendorQuickbooksConfigurationArgsFromJSON,
    UpdateVendorQuickbooksConfigurationArgsToJSON,
    VendorQuickbooksConfiguration,
    VendorQuickbooksConfigurationFromJSON,
    VendorQuickbooksConfigurationToJSON,
} from '../models';

export interface IntegrationsQuickbooksConfigurationPutRequest {
    updateVendorQuickbooksConfigurationArgs: UpdateVendorQuickbooksConfigurationArgs;
}

export interface IntegrationsQuickbooksCustomerNameConfigurationGetRequest {
    customerName: string;
}

export interface IntegrationsQuickbooksCustomerNameConfigurationPostRequest {
    customerName: string;
    createCustomerQuickbooksConfigurationArgs: CreateCustomerQuickbooksConfigurationArgs;
}

export interface IntegrationsQuickbooksCustomerNameConfigurationPutRequest {
    customerName: string;
    updateCustomerQuickbooksConfigurationArgs: UpdateCustomerQuickbooksConfigurationArgs;
}

/**
 * 
 */
export class IntegrationsApi extends runtime.BaseAPI {

    /**
     */
    async integrationsQuickbooksConfigurationGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<VendorQuickbooksConfiguration>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integrations/quickbooks/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VendorQuickbooksConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async integrationsQuickbooksConfigurationGet(initOverrides?: RequestInit): Promise<VendorQuickbooksConfiguration> {
        const response = await this.integrationsQuickbooksConfigurationGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async integrationsQuickbooksConfigurationPutRaw(requestParameters: IntegrationsQuickbooksConfigurationPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VendorQuickbooksConfiguration>> {
        if (requestParameters.updateVendorQuickbooksConfigurationArgs === null || requestParameters.updateVendorQuickbooksConfigurationArgs === undefined) {
            throw new runtime.RequiredError('updateVendorQuickbooksConfigurationArgs','Required parameter requestParameters.updateVendorQuickbooksConfigurationArgs was null or undefined when calling integrationsQuickbooksConfigurationPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integrations/quickbooks/configuration`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVendorQuickbooksConfigurationArgsToJSON(requestParameters.updateVendorQuickbooksConfigurationArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VendorQuickbooksConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async integrationsQuickbooksConfigurationPut(requestParameters: IntegrationsQuickbooksConfigurationPutRequest, initOverrides?: RequestInit): Promise<VendorQuickbooksConfiguration> {
        const response = await this.integrationsQuickbooksConfigurationPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async integrationsQuickbooksCustomerNameConfigurationGetRaw(requestParameters: IntegrationsQuickbooksCustomerNameConfigurationGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerQuickbooksConfiguration>> {
        if (requestParameters.customerName === null || requestParameters.customerName === undefined) {
            throw new runtime.RequiredError('customerName','Required parameter requestParameters.customerName was null or undefined when calling integrationsQuickbooksCustomerNameConfigurationGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integrations/quickbooks/{customer_name}/configuration`.replace(`{${"customer_name"}}`, encodeURIComponent(String(requestParameters.customerName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerQuickbooksConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async integrationsQuickbooksCustomerNameConfigurationGet(requestParameters: IntegrationsQuickbooksCustomerNameConfigurationGetRequest, initOverrides?: RequestInit): Promise<CustomerQuickbooksConfiguration> {
        const response = await this.integrationsQuickbooksCustomerNameConfigurationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async integrationsQuickbooksCustomerNameConfigurationPostRaw(requestParameters: IntegrationsQuickbooksCustomerNameConfigurationPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerQuickbooksConfiguration>> {
        if (requestParameters.customerName === null || requestParameters.customerName === undefined) {
            throw new runtime.RequiredError('customerName','Required parameter requestParameters.customerName was null or undefined when calling integrationsQuickbooksCustomerNameConfigurationPost.');
        }

        if (requestParameters.createCustomerQuickbooksConfigurationArgs === null || requestParameters.createCustomerQuickbooksConfigurationArgs === undefined) {
            throw new runtime.RequiredError('createCustomerQuickbooksConfigurationArgs','Required parameter requestParameters.createCustomerQuickbooksConfigurationArgs was null or undefined when calling integrationsQuickbooksCustomerNameConfigurationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integrations/quickbooks/{customer_name}/configuration`.replace(`{${"customer_name"}}`, encodeURIComponent(String(requestParameters.customerName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomerQuickbooksConfigurationArgsToJSON(requestParameters.createCustomerQuickbooksConfigurationArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerQuickbooksConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async integrationsQuickbooksCustomerNameConfigurationPost(requestParameters: IntegrationsQuickbooksCustomerNameConfigurationPostRequest, initOverrides?: RequestInit): Promise<CustomerQuickbooksConfiguration> {
        const response = await this.integrationsQuickbooksCustomerNameConfigurationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async integrationsQuickbooksCustomerNameConfigurationPutRaw(requestParameters: IntegrationsQuickbooksCustomerNameConfigurationPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerQuickbooksConfiguration>> {
        if (requestParameters.customerName === null || requestParameters.customerName === undefined) {
            throw new runtime.RequiredError('customerName','Required parameter requestParameters.customerName was null or undefined when calling integrationsQuickbooksCustomerNameConfigurationPut.');
        }

        if (requestParameters.updateCustomerQuickbooksConfigurationArgs === null || requestParameters.updateCustomerQuickbooksConfigurationArgs === undefined) {
            throw new runtime.RequiredError('updateCustomerQuickbooksConfigurationArgs','Required parameter requestParameters.updateCustomerQuickbooksConfigurationArgs was null or undefined when calling integrationsQuickbooksCustomerNameConfigurationPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integrations/quickbooks/{customer_name}/configuration`.replace(`{${"customer_name"}}`, encodeURIComponent(String(requestParameters.customerName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCustomerQuickbooksConfigurationArgsToJSON(requestParameters.updateCustomerQuickbooksConfigurationArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerQuickbooksConfigurationFromJSON(jsonValue));
    }

    /**
     */
    async integrationsQuickbooksCustomerNameConfigurationPut(requestParameters: IntegrationsQuickbooksCustomerNameConfigurationPutRequest, initOverrides?: RequestInit): Promise<CustomerQuickbooksConfiguration> {
        const response = await this.integrationsQuickbooksCustomerNameConfigurationPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
