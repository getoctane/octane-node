/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Company,
    CompanyFromJSON,
    CompanyToJSON,
    CreateVendorAvalaraSettingsArgs,
    CreateVendorAvalaraSettingsArgsFromJSON,
    CreateVendorAvalaraSettingsArgsToJSON,
    EntityUseCode,
    EntityUseCodeFromJSON,
    EntityUseCodeToJSON,
    TaxCode,
    TaxCodeFromJSON,
    TaxCodeToJSON,
    UpdateVendorAvalaraSettingsArgs,
    UpdateVendorAvalaraSettingsArgsFromJSON,
    UpdateVendorAvalaraSettingsArgsToJSON,
    ValidateCredentialsArgs,
    ValidateCredentialsArgsFromJSON,
    ValidateCredentialsArgsToJSON,
    ValidateCredentialsResp,
    ValidateCredentialsRespFromJSON,
    ValidateCredentialsRespToJSON,
    VendorAvalaraSettings,
    VendorAvalaraSettingsFromJSON,
    VendorAvalaraSettingsToJSON,
} from '../models';

export interface IntegrationTaxAvalaraCredentialsValidPostRequest {
    validateCredentialsArgs: ValidateCredentialsArgs;
}

export interface IntegrationTaxAvalaraSettingsPostRequest {
    createVendorAvalaraSettingsArgs: CreateVendorAvalaraSettingsArgs;
}

export interface IntegrationTaxAvalaraSettingsPutRequest {
    updateVendorAvalaraSettingsArgs: UpdateVendorAvalaraSettingsArgs;
}

/**
 * 
 */
export class AvalaraApi extends runtime.BaseAPI {

    /**
     * Lists the companies found in your Avalara account.
     * Get Avalara companies
     */
    async integrationTaxAvalaraCompanyGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Company>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integration/tax/avalara/company`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyFromJSON));
    }

    /**
     * Lists the companies found in your Avalara account.
     * Get Avalara companies
     */
    async integrationTaxAvalaraCompanyGet(initOverrides?: RequestInit): Promise<Array<Company>> {
        const response = await this.integrationTaxAvalaraCompanyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Validates the Avalara credentials for you vendor.
     * Validate Avalara credentials
     */
    async integrationTaxAvalaraCredentialsValidPostRaw(requestParameters: IntegrationTaxAvalaraCredentialsValidPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ValidateCredentialsResp>> {
        if (requestParameters.validateCredentialsArgs === null || requestParameters.validateCredentialsArgs === undefined) {
            throw new runtime.RequiredError('validateCredentialsArgs','Required parameter requestParameters.validateCredentialsArgs was null or undefined when calling integrationTaxAvalaraCredentialsValidPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integration/tax/avalara/credentials/valid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateCredentialsArgsToJSON(requestParameters.validateCredentialsArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateCredentialsRespFromJSON(jsonValue));
    }

    /**
     * Validates the Avalara credentials for you vendor.
     * Validate Avalara credentials
     */
    async integrationTaxAvalaraCredentialsValidPost(requestParameters: IntegrationTaxAvalaraCredentialsValidPostRequest, initOverrides?: RequestInit): Promise<ValidateCredentialsResp> {
        const response = await this.integrationTaxAvalaraCredentialsValidPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the entity codes available in avalara.
     * Get Avalara entity codes
     */
    async integrationTaxAvalaraEntityUseCodeGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<EntityUseCode>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integration/tax/avalara/entity_use_code`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntityUseCodeFromJSON));
    }

    /**
     * Lists the entity codes available in avalara.
     * Get Avalara entity codes
     */
    async integrationTaxAvalaraEntityUseCodeGet(initOverrides?: RequestInit): Promise<Array<EntityUseCode>> {
        const response = await this.integrationTaxAvalaraEntityUseCodeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the vendor Avalara settings.
     * Get Vendor Avalara Settings
     */
    async integrationTaxAvalaraSettingsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<VendorAvalaraSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integration/tax/avalara/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VendorAvalaraSettingsFromJSON(jsonValue));
    }

    /**
     * Returns the vendor Avalara settings.
     * Get Vendor Avalara Settings
     */
    async integrationTaxAvalaraSettingsGet(initOverrides?: RequestInit): Promise<VendorAvalaraSettings> {
        const response = await this.integrationTaxAvalaraSettingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates the Avalara settings for you vendor.
     * Create vendor Avalara settings
     */
    async integrationTaxAvalaraSettingsPostRaw(requestParameters: IntegrationTaxAvalaraSettingsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VendorAvalaraSettings>> {
        if (requestParameters.createVendorAvalaraSettingsArgs === null || requestParameters.createVendorAvalaraSettingsArgs === undefined) {
            throw new runtime.RequiredError('createVendorAvalaraSettingsArgs','Required parameter requestParameters.createVendorAvalaraSettingsArgs was null or undefined when calling integrationTaxAvalaraSettingsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integration/tax/avalara/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVendorAvalaraSettingsArgsToJSON(requestParameters.createVendorAvalaraSettingsArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VendorAvalaraSettingsFromJSON(jsonValue));
    }

    /**
     * Creates the Avalara settings for you vendor.
     * Create vendor Avalara settings
     */
    async integrationTaxAvalaraSettingsPost(requestParameters: IntegrationTaxAvalaraSettingsPostRequest, initOverrides?: RequestInit): Promise<VendorAvalaraSettings> {
        const response = await this.integrationTaxAvalaraSettingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Avalara settings for you vendor.
     * Update vendor Avalara settings
     */
    async integrationTaxAvalaraSettingsPutRaw(requestParameters: IntegrationTaxAvalaraSettingsPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VendorAvalaraSettings>> {
        if (requestParameters.updateVendorAvalaraSettingsArgs === null || requestParameters.updateVendorAvalaraSettingsArgs === undefined) {
            throw new runtime.RequiredError('updateVendorAvalaraSettingsArgs','Required parameter requestParameters.updateVendorAvalaraSettingsArgs was null or undefined when calling integrationTaxAvalaraSettingsPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integration/tax/avalara/settings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVendorAvalaraSettingsArgsToJSON(requestParameters.updateVendorAvalaraSettingsArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VendorAvalaraSettingsFromJSON(jsonValue));
    }

    /**
     * Updates the Avalara settings for you vendor.
     * Update vendor Avalara settings
     */
    async integrationTaxAvalaraSettingsPut(requestParameters: IntegrationTaxAvalaraSettingsPutRequest, initOverrides?: RequestInit): Promise<VendorAvalaraSettings> {
        const response = await this.integrationTaxAvalaraSettingsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the Avalara Tax codes associated for a specific company.
     * Get Avalara Tax Codes
     */
    async integrationTaxAvalaraTaxCodeGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TaxCode>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/integration/tax/avalara/tax_code`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaxCodeFromJSON));
    }

    /**
     * Lists the Avalara Tax codes associated for a specific company.
     * Get Avalara Tax Codes
     */
    async integrationTaxAvalaraTaxCodeGet(initOverrides?: RequestInit): Promise<Array<TaxCode>> {
        const response = await this.integrationTaxAvalaraTaxCodeGetRaw(initOverrides);
        return await response.value();
    }

}
