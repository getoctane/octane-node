/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplyCouponInputArgs,
    ApplyCouponInputArgsFromJSON,
    ApplyCouponInputArgsToJSON,
    Coupon,
    CouponFromJSON,
    CouponToJSON,
    CouponInputArgs,
    CouponInputArgsFromJSON,
    CouponInputArgsToJSON,
} from '../models';

export interface CouponsApplyCouponPostRequest {
    applyCouponInputArgs: ApplyCouponInputArgs;
}

export interface CouponsCouponNameDeleteRequest {
    couponName: string;
}

export interface CouponsCouponNameGetRequest {
    couponName: string;
}

export interface CouponsPostRequest {
    couponInputArgs: CouponInputArgs;
}

/**
 * 
 */
export class CouponsApi extends runtime.BaseAPI {

    /**
     * Apply a coupon to the provided customer.
     * Apply Coupon
     */
    async couponsApplyCouponPostRaw(requestParameters: CouponsApplyCouponPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.applyCouponInputArgs === null || requestParameters.applyCouponInputArgs === undefined) {
            throw new runtime.RequiredError('applyCouponInputArgs','Required parameter requestParameters.applyCouponInputArgs was null or undefined when calling couponsApplyCouponPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/coupons/apply_coupon`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplyCouponInputArgsToJSON(requestParameters.applyCouponInputArgs),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Apply a coupon to the provided customer.
     * Apply Coupon
     */
    async couponsApplyCouponPost(requestParameters: CouponsApplyCouponPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.couponsApplyCouponPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a specific coupon for a vendor.
     * Delete Coupon
     */
    async couponsCouponNameDeleteRaw(requestParameters: CouponsCouponNameDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponName === null || requestParameters.couponName === undefined) {
            throw new runtime.RequiredError('couponName','Required parameter requestParameters.couponName was null or undefined when calling couponsCouponNameDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/coupons/{coupon_name}`.replace(`{${"coupon_name"}}`, encodeURIComponent(String(requestParameters.couponName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific coupon for a vendor.
     * Delete Coupon
     */
    async couponsCouponNameDelete(requestParameters: CouponsCouponNameDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.couponsCouponNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific coupon for a vendor.
     * Get Coupon
     */
    async couponsCouponNameGetRaw(requestParameters: CouponsCouponNameGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Coupon>> {
        if (requestParameters.couponName === null || requestParameters.couponName === undefined) {
            throw new runtime.RequiredError('couponName','Required parameter requestParameters.couponName was null or undefined when calling couponsCouponNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/coupons/{coupon_name}`.replace(`{${"coupon_name"}}`, encodeURIComponent(String(requestParameters.couponName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponFromJSON(jsonValue));
    }

    /**
     * Get a specific coupon for a vendor.
     * Get Coupon
     */
    async couponsCouponNameGet(requestParameters: CouponsCouponNameGetRequest, initOverrides?: RequestInit): Promise<Coupon> {
        const response = await this.couponsCouponNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all coupons for a specific vendor.
     * Get Coupons
     */
    async couponsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Coupon>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/coupons/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CouponFromJSON));
    }

    /**
     * Gets all coupons for a specific vendor.
     * Get Coupons
     */
    async couponsGet(initOverrides?: RequestInit): Promise<Array<Coupon>> {
        const response = await this.couponsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a coupon for a vendor.
     * Create Coupons
     */
    async couponsPostRaw(requestParameters: CouponsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Coupon>> {
        if (requestParameters.couponInputArgs === null || requestParameters.couponInputArgs === undefined) {
            throw new runtime.RequiredError('couponInputArgs','Required parameter requestParameters.couponInputArgs was null or undefined when calling couponsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/coupons/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponInputArgsToJSON(requestParameters.couponInputArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponFromJSON(jsonValue));
    }

    /**
     * Create a coupon for a vendor.
     * Create Coupons
     */
    async couponsPost(requestParameters: CouponsPostRequest, initOverrides?: RequestInit): Promise<Coupon> {
        const response = await this.couponsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
