/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaymentGatewayCredential,
    PaymentGatewayCredentialFromJSON,
    PaymentGatewayCredentialToJSON,
    PaymentGatewayCredentialInputArgs,
    PaymentGatewayCredentialInputArgsFromJSON,
    PaymentGatewayCredentialInputArgsToJSON,
} from '../models';

export interface PaymentGatewayCredentialsPostRequest {
    paymentGatewayCredentialInputArgs: PaymentGatewayCredentialInputArgs;
}

/**
 * 
 */
export class PaymentGatewayCredentialApi extends runtime.BaseAPI {

    /**
     * Returns the payment gateway information for your account (the Paddle or Stripe credentials used to issue and pay invoices)
     * Get PaymentGatewayCredential
     */
    async paymentGatewayCredentialsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaymentGatewayCredential>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/payment_gateway_credentials/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentGatewayCredentialFromJSON(jsonValue));
    }

    /**
     * Returns the payment gateway information for your account (the Paddle or Stripe credentials used to issue and pay invoices)
     * Get PaymentGatewayCredential
     */
    async paymentGatewayCredentialsGet(initOverrides?: RequestInit): Promise<PaymentGatewayCredential> {
        const response = await this.paymentGatewayCredentialsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Adds the credentials for a payment gateway, to be used to issue and pay invoices to your account.
     * Add PaymentGatewayCredential
     */
    async paymentGatewayCredentialsPostRaw(requestParameters: PaymentGatewayCredentialsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PaymentGatewayCredential>> {
        if (requestParameters.paymentGatewayCredentialInputArgs === null || requestParameters.paymentGatewayCredentialInputArgs === undefined) {
            throw new runtime.RequiredError('paymentGatewayCredentialInputArgs','Required parameter requestParameters.paymentGatewayCredentialInputArgs was null or undefined when calling paymentGatewayCredentialsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/payment_gateway_credentials/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentGatewayCredentialInputArgsToJSON(requestParameters.paymentGatewayCredentialInputArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentGatewayCredentialFromJSON(jsonValue));
    }

    /**
     * Adds the credentials for a payment gateway, to be used to issue and pay invoices to your account.
     * Add PaymentGatewayCredential
     */
    async paymentGatewayCredentialsPost(requestParameters: PaymentGatewayCredentialsPostRequest, initOverrides?: RequestInit): Promise<PaymentGatewayCredential> {
        const response = await this.paymentGatewayCredentialsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
