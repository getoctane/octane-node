/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BillingSettings,
    BillingSettingsFromJSON,
    BillingSettingsToJSON,
    CreateBillingSettingsInputArgs,
    CreateBillingSettingsInputArgsFromJSON,
    CreateBillingSettingsInputArgsToJSON,
    UpdateBillingSettingsInputArgs,
    UpdateBillingSettingsInputArgsFromJSON,
    UpdateBillingSettingsInputArgsToJSON,
} from '../models';

export interface BillingSettingsPostRequest {
    createBillingSettingsInputArgs: CreateBillingSettingsInputArgs;
}

export interface BillingSettingsPutRequest {
    updateBillingSettingsInputArgs: UpdateBillingSettingsInputArgs;
}

/**
 * 
 */
export class BillingSettingsApi extends runtime.BaseAPI {

    /**
     * Delete billing settings for a vendor.
     * Delete Billing Settings
     */
    async billingSettingsDeleteRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/billing_settings/`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete billing settings for a vendor.
     * Delete Billing Settings
     */
    async billingSettingsDelete(initOverrides?: RequestInit): Promise<void> {
        await this.billingSettingsDeleteRaw(initOverrides);
    }

    /**
     * Fetch the billing settings for a vendor.
     * Get Billing Settings
     */
    async billingSettingsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<BillingSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/billing_settings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingSettingsFromJSON(jsonValue));
    }

    /**
     * Fetch the billing settings for a vendor.
     * Get Billing Settings
     */
    async billingSettingsGet(initOverrides?: RequestInit): Promise<BillingSettings> {
        const response = await this.billingSettingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create billing settings for a vendor.
     * Create billing settings.
     */
    async billingSettingsPostRaw(requestParameters: BillingSettingsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BillingSettings>> {
        if (requestParameters.createBillingSettingsInputArgs === null || requestParameters.createBillingSettingsInputArgs === undefined) {
            throw new runtime.RequiredError('createBillingSettingsInputArgs','Required parameter requestParameters.createBillingSettingsInputArgs was null or undefined when calling billingSettingsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/billing_settings/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBillingSettingsInputArgsToJSON(requestParameters.createBillingSettingsInputArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingSettingsFromJSON(jsonValue));
    }

    /**
     * Create billing settings for a vendor.
     * Create billing settings.
     */
    async billingSettingsPost(requestParameters: BillingSettingsPostRequest, initOverrides?: RequestInit): Promise<BillingSettings> {
        const response = await this.billingSettingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update billing settings for a vendor.
     * Update Billing Settings
     */
    async billingSettingsPutRaw(requestParameters: BillingSettingsPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BillingSettings>> {
        if (requestParameters.updateBillingSettingsInputArgs === null || requestParameters.updateBillingSettingsInputArgs === undefined) {
            throw new runtime.RequiredError('updateBillingSettingsInputArgs','Required parameter requestParameters.updateBillingSettingsInputArgs was null or undefined when calling billingSettingsPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/billing_settings/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBillingSettingsInputArgsToJSON(requestParameters.updateBillingSettingsInputArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingSettingsFromJSON(jsonValue));
    }

    /**
     * Update billing settings for a vendor.
     * Update Billing Settings
     */
    async billingSettingsPut(requestParameters: BillingSettingsPutRequest, initOverrides?: RequestInit): Promise<BillingSettings> {
        const response = await this.billingSettingsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
