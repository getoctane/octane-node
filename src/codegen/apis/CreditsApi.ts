/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateCreditGrantArgs,
    CreateCreditGrantArgsFromJSON,
    CreateCreditGrantArgsToJSON,
    CreditGrant,
    CreditGrantFromJSON,
    CreditGrantToJSON,
    CreditLedger,
    CreditLedgerFromJSON,
    CreditLedgerToJSON,
    ListCreditGrants,
    ListCreditGrantsFromJSON,
    ListCreditGrantsToJSON,
    ListCreditGrantsArgs,
    ListCreditGrantsArgsFromJSON,
    ListCreditGrantsArgsToJSON,
    VoidCreditGrantArgs,
    VoidCreditGrantArgsFromJSON,
    VoidCreditGrantArgsToJSON,
} from '../models';

export interface CreditsGrantGetRequest {
    listCreditGrantsArgs: ListCreditGrantsArgs;
}

export interface CreditsGrantGrantUuidGrantPostRequest {
    grantUuid: string;
}

export interface CreditsGrantGrantUuidVoidPostRequest {
    grantUuid: string;
    voidCreditGrantArgs?: VoidCreditGrantArgs;
}

export interface CreditsGrantPostRequest {
    createCreditGrantArgs: CreateCreditGrantArgs;
}

export interface CreditsLedgerCustomerNameAsOfStrGetRequest {
    asOfStr: string;
    customerName: string;
}

export interface CreditsLedgerCustomerNameGetRequest {
    customerName: string;
}

/**
 * 
 */
export class CreditsApi extends runtime.BaseAPI {

    /**
     * Returns all the credit grants under your account.
     * Get Credit Grants
     */
    async creditsGrantGetRaw(requestParameters: CreditsGrantGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListCreditGrants>> {
        if (requestParameters.listCreditGrantsArgs === null || requestParameters.listCreditGrantsArgs === undefined) {
            throw new runtime.RequiredError('listCreditGrantsArgs','Required parameter requestParameters.listCreditGrantsArgs was null or undefined when calling creditsGrantGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/credits/grant/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: ListCreditGrantsArgsToJSON(requestParameters.listCreditGrantsArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCreditGrantsFromJSON(jsonValue));
    }

    /**
     * Returns all the credit grants under your account.
     * Get Credit Grants
     */
    async creditsGrantGet(requestParameters: CreditsGrantGetRequest, initOverrides?: RequestInit): Promise<ListCreditGrants> {
        const response = await this.creditsGrantGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a credit grant to the ledger with the given grant UUID, if it was not immediately granted on creation.
     * Add Credit Grant to Ledger
     */
    async creditsGrantGrantUuidGrantPostRaw(requestParameters: CreditsGrantGrantUuidGrantPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.grantUuid === null || requestParameters.grantUuid === undefined) {
            throw new runtime.RequiredError('grantUuid','Required parameter requestParameters.grantUuid was null or undefined when calling creditsGrantGrantUuidGrantPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/credits/grant/{grant_uuid}/grant`.replace(`{${"grant_uuid"}}`, encodeURIComponent(String(requestParameters.grantUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a credit grant to the ledger with the given grant UUID, if it was not immediately granted on creation.
     * Add Credit Grant to Ledger
     */
    async creditsGrantGrantUuidGrantPost(requestParameters: CreditsGrantGrantUuidGrantPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.creditsGrantGrantUuidGrantPostRaw(requestParameters, initOverrides);
    }

    /**
     * Deactivates a credit grant with the given grant UUID.
     * Void a Credit Grant
     */
    async creditsGrantGrantUuidVoidPostRaw(requestParameters: CreditsGrantGrantUuidVoidPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.grantUuid === null || requestParameters.grantUuid === undefined) {
            throw new runtime.RequiredError('grantUuid','Required parameter requestParameters.grantUuid was null or undefined when calling creditsGrantGrantUuidVoidPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/credits/grant/{grant_uuid}/void`.replace(`{${"grant_uuid"}}`, encodeURIComponent(String(requestParameters.grantUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VoidCreditGrantArgsToJSON(requestParameters.voidCreditGrantArgs),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deactivates a credit grant with the given grant UUID.
     * Void a Credit Grant
     */
    async creditsGrantGrantUuidVoidPost(requestParameters: CreditsGrantGrantUuidVoidPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.creditsGrantGrantUuidVoidPostRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a credit grant for one of your customers.
     * Create a Credit Grant
     */
    async creditsGrantPostRaw(requestParameters: CreditsGrantPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreditGrant>> {
        if (requestParameters.createCreditGrantArgs === null || requestParameters.createCreditGrantArgs === undefined) {
            throw new runtime.RequiredError('createCreditGrantArgs','Required parameter requestParameters.createCreditGrantArgs was null or undefined when calling creditsGrantPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/credits/grant/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCreditGrantArgsToJSON(requestParameters.createCreditGrantArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditGrantFromJSON(jsonValue));
    }

    /**
     * Creates a credit grant for one of your customers.
     * Create a Credit Grant
     */
    async creditsGrantPost(requestParameters: CreditsGrantPostRequest, initOverrides?: RequestInit): Promise<CreditGrant> {
        const response = await this.creditsGrantPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the credit ledger for one of your customers.
     * Fetch a Credit Ledger
     */
    async creditsLedgerCustomerNameAsOfStrGetRaw(requestParameters: CreditsLedgerCustomerNameAsOfStrGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CreditLedger>>> {
        if (requestParameters.asOfStr === null || requestParameters.asOfStr === undefined) {
            throw new runtime.RequiredError('asOfStr','Required parameter requestParameters.asOfStr was null or undefined when calling creditsLedgerCustomerNameAsOfStrGet.');
        }

        if (requestParameters.customerName === null || requestParameters.customerName === undefined) {
            throw new runtime.RequiredError('customerName','Required parameter requestParameters.customerName was null or undefined when calling creditsLedgerCustomerNameAsOfStrGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/credits/ledger/{customer_name}/{as_of_str}`.replace(`{${"as_of_str"}}`, encodeURIComponent(String(requestParameters.asOfStr))).replace(`{${"customer_name"}}`, encodeURIComponent(String(requestParameters.customerName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CreditLedgerFromJSON));
    }

    /**
     * Returns the credit ledger for one of your customers.
     * Fetch a Credit Ledger
     */
    async creditsLedgerCustomerNameAsOfStrGet(requestParameters: CreditsLedgerCustomerNameAsOfStrGetRequest, initOverrides?: RequestInit): Promise<Array<CreditLedger>> {
        const response = await this.creditsLedgerCustomerNameAsOfStrGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the credit ledger for one of your customers.
     * Fetch a Credit Ledger
     */
    async creditsLedgerCustomerNameGetRaw(requestParameters: CreditsLedgerCustomerNameGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CreditLedger>>> {
        if (requestParameters.customerName === null || requestParameters.customerName === undefined) {
            throw new runtime.RequiredError('customerName','Required parameter requestParameters.customerName was null or undefined when calling creditsLedgerCustomerNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/credits/ledger/{customer_name}/`.replace(`{${"customer_name"}}`, encodeURIComponent(String(requestParameters.customerName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CreditLedgerFromJSON));
    }

    /**
     * Returns the credit ledger for one of your customers.
     * Fetch a Credit Ledger
     */
    async creditsLedgerCustomerNameGet(requestParameters: CreditsLedgerCustomerNameGetRequest, initOverrides?: RequestInit): Promise<Array<CreditLedger>> {
        const response = await this.creditsLedgerCustomerNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
