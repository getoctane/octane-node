/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateWebhookArgs,
    CreateWebhookArgsFromJSON,
    CreateWebhookArgsToJSON,
    Webhook,
    WebhookFromJSON,
    WebhookToJSON,
} from '../models';

export interface WebhooksPostRequest {
    createWebhookArgs: CreateWebhookArgs;
}

export interface WebhooksUuidDeleteRequest {
    uuid: string;
}

export interface WebhooksUuidGetRequest {
    uuid: string;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * Get all Webhooks for a given Vendor.
     * Get Webhooks
     */
    async webhooksGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Webhook>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/webhooks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebhookFromJSON));
    }

    /**
     * Get all Webhooks for a given Vendor.
     * Get Webhooks
     */
    async webhooksGet(initOverrides?: RequestInit): Promise<Array<Webhook>> {
        const response = await this.webhooksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Add an endpoint to use with Octane\'s Webhook API.
     * Add Webhook
     */
    async webhooksPostRaw(requestParameters: WebhooksPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters.createWebhookArgs === null || requestParameters.createWebhookArgs === undefined) {
            throw new runtime.RequiredError('createWebhookArgs','Required parameter requestParameters.createWebhookArgs was null or undefined when calling webhooksPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/webhooks/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWebhookArgsToJSON(requestParameters.createWebhookArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     * Add an endpoint to use with Octane\'s Webhook API.
     * Add Webhook
     */
    async webhooksPost(requestParameters: WebhooksPostRequest, initOverrides?: RequestInit): Promise<Webhook> {
        const response = await this.webhooksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete and unregister a webhook URL given its UUID.
     * Delete Webhook
     */
    async webhooksUuidDeleteRaw(requestParameters: WebhooksUuidDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling webhooksUuidDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/webhooks/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete and unregister a webhook URL given its UUID.
     * Delete Webhook
     */
    async webhooksUuidDelete(requestParameters: WebhooksUuidDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.webhooksUuidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a webhook given its UUID.
     * Get Webhook
     */
    async webhooksUuidGetRaw(requestParameters: WebhooksUuidGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Webhook>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling webhooksUuidGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/webhooks/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookFromJSON(jsonValue));
    }

    /**
     * Retrieve a webhook given its UUID.
     * Get Webhook
     */
    async webhooksUuidGet(requestParameters: WebhooksUuidGetRequest, initOverrides?: RequestInit): Promise<Webhook> {
        const response = await this.webhooksUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
