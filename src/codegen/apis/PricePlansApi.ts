/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePricePlanArgs,
    CreatePricePlanArgsFromJSON,
    CreatePricePlanArgsToJSON,
    PricePlan,
    PricePlanFromJSON,
    PricePlanToJSON,
    UpdatePricePlanArgs,
    UpdatePricePlanArgsFromJSON,
    UpdatePricePlanArgsToJSON,
    UpdatePricePlanInPlaceArgs,
    UpdatePricePlanInPlaceArgsFromJSON,
    UpdatePricePlanInPlaceArgsToJSON,
} from '../models';

export interface PricePlansPostRequest {
    createPricePlanArgs: CreatePricePlanArgs;
}

export interface PricePlansPricePlanNameArchivePostRequest {
    pricePlanName: string;
}

export interface PricePlansPricePlanNameDeleteRequest {
    pricePlanName: string;
}

export interface PricePlansPricePlanNameGetRequest {
    pricePlanName: string;
}

export interface PricePlansPricePlanNamePutRequest {
    pricePlanName: string;
    updatePricePlanArgs: UpdatePricePlanArgs;
}

export interface PricePlansUpdateInPlacePricePlanNamePostRequest {
    pricePlanName: string;
    updatePricePlanInPlaceArgs: UpdatePricePlanInPlaceArgs;
}

export interface PricePlansUpdateInPlacePricePlanNameTagPostRequest {
    pricePlanName: string;
    tag: string;
    updatePricePlanInPlaceArgs: UpdatePricePlanInPlaceArgs;
}

/**
 * 
 */
export class PricePlansApi extends runtime.BaseAPI {

    /**
     * Fetch all price plans associated with a vendor.
     * Get All Price Plans
     */
    async pricePlansGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PricePlan>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/price_plans/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PricePlanFromJSON));
    }

    /**
     * Fetch all price plans associated with a vendor.
     * Get All Price Plans
     */
    async pricePlansGet(initOverrides?: RequestInit): Promise<Array<PricePlan>> {
        const response = await this.pricePlansGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create Price Plan
     */
    async pricePlansPostRaw(requestParameters: PricePlansPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PricePlan>> {
        if (requestParameters.createPricePlanArgs === null || requestParameters.createPricePlanArgs === undefined) {
            throw new runtime.RequiredError('createPricePlanArgs','Required parameter requestParameters.createPricePlanArgs was null or undefined when calling pricePlansPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/price_plans/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePricePlanArgsToJSON(requestParameters.createPricePlanArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricePlanFromJSON(jsonValue));
    }

    /**
     * Create Price Plan
     */
    async pricePlansPost(requestParameters: PricePlansPostRequest, initOverrides?: RequestInit): Promise<PricePlan> {
        const response = await this.pricePlansPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Archive Price Plan
     */
    async pricePlansPricePlanNameArchivePostRaw(requestParameters: PricePlansPricePlanNameArchivePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pricePlanName === null || requestParameters.pricePlanName === undefined) {
            throw new runtime.RequiredError('pricePlanName','Required parameter requestParameters.pricePlanName was null or undefined when calling pricePlansPricePlanNameArchivePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/price_plans/{price_plan_name}/archive`.replace(`{${"price_plan_name"}}`, encodeURIComponent(String(requestParameters.pricePlanName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Archive Price Plan
     */
    async pricePlansPricePlanNameArchivePost(requestParameters: PricePlansPricePlanNameArchivePostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.pricePlansPricePlanNameArchivePostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an existing Price Plan. Plans which map to active Subscriptions must be replaced or removed before deletion can occur.
     * Delete Price Plan
     */
    async pricePlansPricePlanNameDeleteRaw(requestParameters: PricePlansPricePlanNameDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pricePlanName === null || requestParameters.pricePlanName === undefined) {
            throw new runtime.RequiredError('pricePlanName','Required parameter requestParameters.pricePlanName was null or undefined when calling pricePlansPricePlanNameDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/price_plans/{price_plan_name}`.replace(`{${"price_plan_name"}}`, encodeURIComponent(String(requestParameters.pricePlanName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing Price Plan. Plans which map to active Subscriptions must be replaced or removed before deletion can occur.
     * Delete Price Plan
     */
    async pricePlansPricePlanNameDelete(requestParameters: PricePlansPricePlanNameDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.pricePlansPricePlanNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Fetch an existing price plan.
     * Get a Price Plan
     */
    async pricePlansPricePlanNameGetRaw(requestParameters: PricePlansPricePlanNameGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PricePlan>> {
        if (requestParameters.pricePlanName === null || requestParameters.pricePlanName === undefined) {
            throw new runtime.RequiredError('pricePlanName','Required parameter requestParameters.pricePlanName was null or undefined when calling pricePlansPricePlanNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/price_plans/{price_plan_name}`.replace(`{${"price_plan_name"}}`, encodeURIComponent(String(requestParameters.pricePlanName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricePlanFromJSON(jsonValue));
    }

    /**
     * Fetch an existing price plan.
     * Get a Price Plan
     */
    async pricePlansPricePlanNameGet(requestParameters: PricePlansPricePlanNameGetRequest, initOverrides?: RequestInit): Promise<PricePlan> {
        const response = await this.pricePlansPricePlanNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing price plan.
     * Update a Price Plan
     */
    async pricePlansPricePlanNamePutRaw(requestParameters: PricePlansPricePlanNamePutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PricePlan>> {
        if (requestParameters.pricePlanName === null || requestParameters.pricePlanName === undefined) {
            throw new runtime.RequiredError('pricePlanName','Required parameter requestParameters.pricePlanName was null or undefined when calling pricePlansPricePlanNamePut.');
        }

        if (requestParameters.updatePricePlanArgs === null || requestParameters.updatePricePlanArgs === undefined) {
            throw new runtime.RequiredError('updatePricePlanArgs','Required parameter requestParameters.updatePricePlanArgs was null or undefined when calling pricePlansPricePlanNamePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/price_plans/{price_plan_name}`.replace(`{${"price_plan_name"}}`, encodeURIComponent(String(requestParameters.pricePlanName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePricePlanArgsToJSON(requestParameters.updatePricePlanArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricePlanFromJSON(jsonValue));
    }

    /**
     * Update an existing price plan.
     * Update a Price Plan
     */
    async pricePlansPricePlanNamePut(requestParameters: PricePlansPricePlanNamePutRequest, initOverrides?: RequestInit): Promise<PricePlan> {
        const response = await this.pricePlansPricePlanNamePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pricePlansUpdateInPlacePricePlanNamePostRaw(requestParameters: PricePlansUpdateInPlacePricePlanNamePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PricePlan>> {
        if (requestParameters.pricePlanName === null || requestParameters.pricePlanName === undefined) {
            throw new runtime.RequiredError('pricePlanName','Required parameter requestParameters.pricePlanName was null or undefined when calling pricePlansUpdateInPlacePricePlanNamePost.');
        }

        if (requestParameters.updatePricePlanInPlaceArgs === null || requestParameters.updatePricePlanInPlaceArgs === undefined) {
            throw new runtime.RequiredError('updatePricePlanInPlaceArgs','Required parameter requestParameters.updatePricePlanInPlaceArgs was null or undefined when calling pricePlansUpdateInPlacePricePlanNamePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/price_plans/update_in_place/{price_plan_name}`.replace(`{${"price_plan_name"}}`, encodeURIComponent(String(requestParameters.pricePlanName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePricePlanInPlaceArgsToJSON(requestParameters.updatePricePlanInPlaceArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricePlanFromJSON(jsonValue));
    }

    /**
     */
    async pricePlansUpdateInPlacePricePlanNamePost(requestParameters: PricePlansUpdateInPlacePricePlanNamePostRequest, initOverrides?: RequestInit): Promise<PricePlan> {
        const response = await this.pricePlansUpdateInPlacePricePlanNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pricePlansUpdateInPlacePricePlanNameTagPostRaw(requestParameters: PricePlansUpdateInPlacePricePlanNameTagPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PricePlan>> {
        if (requestParameters.pricePlanName === null || requestParameters.pricePlanName === undefined) {
            throw new runtime.RequiredError('pricePlanName','Required parameter requestParameters.pricePlanName was null or undefined when calling pricePlansUpdateInPlacePricePlanNameTagPost.');
        }

        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling pricePlansUpdateInPlacePricePlanNameTagPost.');
        }

        if (requestParameters.updatePricePlanInPlaceArgs === null || requestParameters.updatePricePlanInPlaceArgs === undefined) {
            throw new runtime.RequiredError('updatePricePlanInPlaceArgs','Required parameter requestParameters.updatePricePlanInPlaceArgs was null or undefined when calling pricePlansUpdateInPlacePricePlanNameTagPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/price_plans/update_in_place/{price_plan_name}/{tag}`.replace(`{${"price_plan_name"}}`, encodeURIComponent(String(requestParameters.pricePlanName))).replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePricePlanInPlaceArgsToJSON(requestParameters.updatePricePlanInPlaceArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricePlanFromJSON(jsonValue));
    }

    /**
     */
    async pricePlansUpdateInPlacePricePlanNameTagPost(requestParameters: PricePlansUpdateInPlacePricePlanNameTagPostRequest, initOverrides?: RequestInit): Promise<PricePlan> {
        const response = await this.pricePlansUpdateInPlacePricePlanNameTagPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
