/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PastInvoices,
    PastInvoicesFromJSON,
    PastInvoicesToJSON,
    UpcomingInvoices,
    UpcomingInvoicesFromJSON,
    UpcomingInvoicesToJSON,
} from '../models';

export interface InvoicesGetRequest {
    forwardSortOffset?: string;
    forwardSecondarySortOffset?: number;
    backwardSecondarySortOffset?: number;
    backwardSortOffset?: string;
    limit?: number;
    customerName?: string;
    status?: string;
    sortColumn?: string;
    startTime?: Date;
    sortDirection?: string;
}

export interface InvoicesUpcomingGetRequest {
    forwardSortOffset?: string;
    forwardSecondarySortOffset?: number;
    backwardSecondarySortOffset?: number;
    backwardSortOffset?: string;
    limit?: number;
    customerName?: string;
    status?: string;
    sortColumn?: string;
    startTime?: Date;
    sortDirection?: string;
}

/**
 * 
 */
export class InvoicesApi extends runtime.BaseAPI {

    /**
     */
    async invoicesGetRaw(requestParameters: InvoicesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PastInvoices>> {
        const queryParameters: any = {};

        if (requestParameters.forwardSortOffset !== undefined) {
            queryParameters['forward_sort_offset'] = requestParameters.forwardSortOffset;
        }

        if (requestParameters.forwardSecondarySortOffset !== undefined) {
            queryParameters['forward_secondary_sort_offset'] = requestParameters.forwardSecondarySortOffset;
        }

        if (requestParameters.backwardSecondarySortOffset !== undefined) {
            queryParameters['backward_secondary_sort_offset'] = requestParameters.backwardSecondarySortOffset;
        }

        if (requestParameters.backwardSortOffset !== undefined) {
            queryParameters['backward_sort_offset'] = requestParameters.backwardSortOffset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.customerName !== undefined) {
            queryParameters['customer_name'] = requestParameters.customerName;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.sortColumn !== undefined) {
            queryParameters['sort_column'] = requestParameters.sortColumn;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['start_time'] = (requestParameters.startTime as any).toISOString();
        }

        if (requestParameters.sortDirection !== undefined) {
            queryParameters['sort_direction'] = requestParameters.sortDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invoices/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PastInvoicesFromJSON(jsonValue));
    }

    /**
     */
    async invoicesGet(requestParameters: InvoicesGetRequest = {}, initOverrides?: RequestInit): Promise<PastInvoices> {
        const response = await this.invoicesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async invoicesUpcomingGetRaw(requestParameters: InvoicesUpcomingGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpcomingInvoices>> {
        const queryParameters: any = {};

        if (requestParameters.forwardSortOffset !== undefined) {
            queryParameters['forward_sort_offset'] = requestParameters.forwardSortOffset;
        }

        if (requestParameters.forwardSecondarySortOffset !== undefined) {
            queryParameters['forward_secondary_sort_offset'] = requestParameters.forwardSecondarySortOffset;
        }

        if (requestParameters.backwardSecondarySortOffset !== undefined) {
            queryParameters['backward_secondary_sort_offset'] = requestParameters.backwardSecondarySortOffset;
        }

        if (requestParameters.backwardSortOffset !== undefined) {
            queryParameters['backward_sort_offset'] = requestParameters.backwardSortOffset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.customerName !== undefined) {
            queryParameters['customer_name'] = requestParameters.customerName;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.sortColumn !== undefined) {
            queryParameters['sort_column'] = requestParameters.sortColumn;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['start_time'] = (requestParameters.startTime as any).toISOString();
        }

        if (requestParameters.sortDirection !== undefined) {
            queryParameters['sort_direction'] = requestParameters.sortDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invoices/upcoming`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpcomingInvoicesFromJSON(jsonValue));
    }

    /**
     */
    async invoicesUpcomingGet(requestParameters: InvoicesUpcomingGetRequest = {}, initOverrides?: RequestInit): Promise<UpcomingInvoices> {
        const response = await this.invoicesUpcomingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
