/* tslint:disable */
/* eslint-disable */
/**
 * Octane API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomerPaymentMethodStatus,
    CustomerPaymentMethodStatusFromJSON,
    CustomerPaymentMethodStatusToJSON,
    CustomerPortalStripeCredential,
    CustomerPortalStripeCredentialFromJSON,
    CustomerPortalStripeCredentialToJSON,
    CustomerPortalSubscription,
    CustomerPortalSubscriptionFromJSON,
    CustomerPortalSubscriptionToJSON,
    CustomerPortalSubscriptionInputArgs,
    CustomerPortalSubscriptionInputArgsFromJSON,
    CustomerPortalSubscriptionInputArgsToJSON,
    CustomerPortalToken,
    CustomerPortalTokenFromJSON,
    CustomerPortalTokenToJSON,
    CustomerPortalTokenInputArgs,
    CustomerPortalTokenInputArgsFromJSON,
    CustomerPortalTokenInputArgsToJSON,
    PricePlan,
    PricePlanFromJSON,
    PricePlanToJSON,
} from '../models';

export interface EcpSubscriptionPostRequest {
    customerPortalSubscriptionInputArgs: CustomerPortalSubscriptionInputArgs;
}

export interface EcpTokenPostRequest {
    customerPortalTokenInputArgs: CustomerPortalTokenInputArgs;
}

/**
 * 
 */
export class CustomerPortalApi extends runtime.BaseAPI {

    /**
     */
    async ecpPaymentMethodStatusGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerPaymentMethodStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ecp/payment_method_status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerPaymentMethodStatusFromJSON(jsonValue));
    }

    /**
     */
    async ecpPaymentMethodStatusGet(initOverrides?: RequestInit): Promise<CustomerPaymentMethodStatus> {
        const response = await this.ecpPaymentMethodStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch all price plans vendor is exposing to customers.
     * Get Price Plans to show on the customer portal
     */
    async ecpPricePlansGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PricePlan>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ecp/price_plans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PricePlanFromJSON));
    }

    /**
     * Fetch all price plans vendor is exposing to customers.
     * Get Price Plans to show on the customer portal
     */
    async ecpPricePlansGet(initOverrides?: RequestInit): Promise<Array<PricePlan>> {
        const response = await this.ecpPricePlansGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Attempt to create a Stripe SetupIntent object.
     * Create SetupIntent
     */
    async ecpSetupIntentPostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerPortalStripeCredential>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ecp/setup_intent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerPortalStripeCredentialFromJSON(jsonValue));
    }

    /**
     * Attempt to create a Stripe SetupIntent object.
     * Create SetupIntent
     */
    async ecpSetupIntentPost(initOverrides?: RequestInit): Promise<CustomerPortalStripeCredential> {
        const response = await this.ecpSetupIntentPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete the customer\'s subscription.
     * Cancel Subscription
     */
    async ecpSubscriptionDeleteRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ecp/subscription`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the customer\'s subscription.
     * Cancel Subscription
     */
    async ecpSubscriptionDelete(initOverrides?: RequestInit): Promise<void> {
        await this.ecpSubscriptionDeleteRaw(initOverrides);
    }

    /**
     * Fetch the customer\'s active subscription if it exists.
     * Get customer subscription
     */
    async ecpSubscriptionGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerPortalSubscription>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ecp/subscription`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerPortalSubscriptionFromJSON(jsonValue));
    }

    /**
     * Fetch the customer\'s active subscription if it exists.
     * Get customer subscription
     */
    async ecpSubscriptionGet(initOverrides?: RequestInit): Promise<CustomerPortalSubscription> {
        const response = await this.ecpSubscriptionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create/update the customer\'s subscription.
     * Create/update the customer\'s subscription
     */
    async ecpSubscriptionPostRaw(requestParameters: EcpSubscriptionPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerPortalSubscription>> {
        if (requestParameters.customerPortalSubscriptionInputArgs === null || requestParameters.customerPortalSubscriptionInputArgs === undefined) {
            throw new runtime.RequiredError('customerPortalSubscriptionInputArgs','Required parameter requestParameters.customerPortalSubscriptionInputArgs was null or undefined when calling ecpSubscriptionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ecp/subscription`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerPortalSubscriptionInputArgsToJSON(requestParameters.customerPortalSubscriptionInputArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerPortalSubscriptionFromJSON(jsonValue));
    }

    /**
     * Create/update the customer\'s subscription.
     * Create/update the customer\'s subscription
     */
    async ecpSubscriptionPost(requestParameters: EcpSubscriptionPostRequest, initOverrides?: RequestInit): Promise<CustomerPortalSubscription> {
        const response = await this.ecpSubscriptionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a customer-scoped JWT to authorize access to ECP endpoints.
     * Exchange Access Token
     */
    async ecpTokenPostRaw(requestParameters: EcpTokenPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerPortalToken>> {
        if (requestParameters.customerPortalTokenInputArgs === null || requestParameters.customerPortalTokenInputArgs === undefined) {
            throw new runtime.RequiredError('customerPortalTokenInputArgs','Required parameter requestParameters.customerPortalTokenInputArgs was null or undefined when calling ecpTokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerApiKeyAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ecp/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerPortalTokenInputArgsToJSON(requestParameters.customerPortalTokenInputArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerPortalTokenFromJSON(jsonValue));
    }

    /**
     * Generate a customer-scoped JWT to authorize access to ECP endpoints.
     * Exchange Access Token
     */
    async ecpTokenPost(requestParameters: EcpTokenPostRequest, initOverrides?: RequestInit): Promise<CustomerPortalToken> {
        const response = await this.ecpTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
